### Now load up the model data again, nest it and build the model functions
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
pred_offset_pos_acc68 <- make_predictions(offset_curve_sigma_os$model_results[[3]],
pred = "offset_magnitude",
pred.values = seq(0, 50)) %>%
rename("ratio_accurate_68" = 1)
single_cals_curve_uncert_mod %>%
filter(offset_magnitude > 0) %>%
mutate(
offset_magnitude = plyr:round_any(offset_magnitude, 2)
) %>%
group_by(offset_magnitude) %>%
summarize(
ratio_accurate_68 = mean(accuracy_68)
) %>%
ggplot(aes(x = offset_magnitude, y = ratio_accurate_68)) +
geom_bar(stat = 'identity')
single_cals_curve_uncert_mod %>%
filter(offset_magnitude > 0) %>%
mutate(
offset_magnitude = plyr::round_any(offset_magnitude, 2)
) %>%
group_by(offset_magnitude) %>%
summarize(
ratio_accurate_68 = mean(accuracy_68)
) %>%
ggplot(aes(x = offset_magnitude, y = ratio_accurate_68)) +
geom_bar(stat = 'identity')
single_cals_curve_uncert_mod %>%
filter(offset_magnitude > 0) %>%
mutate(
offset_magnitude = plyr::round_any(offset_magnitude, 2)
) %>%
group_by(offset_magnitude) %>%
summarize(
ratio_accurate_68 = mean(accuracy_68)
) %>%
ggplot(aes(x = offset_magnitude, y = ratio_accurate_68)) +
geom_bar(stat = 'identity') +
geom_line(data = pred_offset_pos_acc68)
library(tidyverse)
library(broom)
library(jtools)
### Now load up the model data again, nest it and build the model functions
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_regr <- readRDS("single_cals_curve_uncert_regr.rds")
offset_curve_sigma_os_params <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc"))
pred_offset_pos_acc68 <- make_predictions(offset_curve_sigma_os$model_results[[3]],
pred = "offset_magnitude",
pred.values = seq(0, 50)) %>%
rename("ratio_accurate_68" = 1)
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds")
pred_offset_pos_acc68 <- make_predictions(offset_curve_sigma_os$model_results[[3]],
pred = "offset_magnitude",
pred.values = seq(0, 50)) %>%
rename("ratio_accurate_68" = 1)
single_cals_curve_uncert_mod %>%
filter(offset_magnitude > 0) %>%
mutate(
offset_magnitude = plyr::round_any(offset_magnitude, 2)
) %>%
group_by(offset_magnitude) %>%
summarize(
ratio_accurate_68 = mean(accuracy_68)
) %>%
ggplot(aes(x = offset_magnitude, y = ratio_accurate_68)) +
geom_bar(stat = 'identity') +
geom_line(data = pred_offset_pos_acc68) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", size = 0.5),
text = element_text(family = "Corbel"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
)
View(offset_curve_sigma_os_params)
View(pred_offset_pos_acc68)
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds")
pred_offset_pos_acc68 <- make_predictions(offset_curve_sigma_os$model_results[[3]],
pred = "offset_magnitude",
pred.values = seq(0, 50)) %>%
rename("ratio_accurate_68" = 1)
View(pred_offset_pos_acc68)
View(offset_curve_sigma_os_params)
summary(offset_curve_sigma_os$model_results[[3]])
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc"))
pred_offset_pos_acc68 <- make_predictions(offset_curve_sigma_os$model_results[[3]],
pred = "offset_magnitude",
pred.values = seq(0, 50)) %>%
rename("ratio_accurate_68" = 1)
single_cals_curve_uncert_mod %>%
filter(offset_magnitude > 0) %>%
mutate(
offset_magnitude = plyr::round_any(offset_magnitude, 2)
) %>%
group_by(offset_magnitude) %>%
summarize(
ratio_accurate_68 = mean(accuracy_68)
) %>%
ggplot(aes(x = offset_magnitude, y = ratio_accurate_68)) +
geom_bar(stat = 'identity') +
geom_line(data = pred_offset_pos_acc68) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", linewidth = 0.5),
text = element_text(family = "Corbel"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
)
single_cals_curve_uncert_mod %>%
filter(offset_magnitude > 0) %>%
mutate(
offset_magnitude = plyr::round_any(offset_magnitude, 2)
) %>%
group_by(offset_magnitude) %>%
summarize(
ratio_accurate_68 = mean(accuracy_68)
) %>%
ggplot(aes(x = offset_magnitude, y = ratio_accurate_68)) +
geom_bar(stat = 'identity', fill = "steelblue") +
geom_line(data = pred_offset_pos_acc68) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", linewidth = 0.5),
text = element_text(family = "Corbel"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
)
single_cals_curve_uncert_mod %>%
filter(offset_magnitude > 0) %>%
mutate(
offset_magnitude = plyr::round_any(offset_magnitude, 2)
) %>%
group_by(offset_magnitude) %>%
summarize(
ratio_accurate_68 = mean(accuracy_68)
) %>%
ggplot(aes(x = offset_magnitude, y = ratio_accurate_68)) +
geom_bar(stat = 'identity', fill = "steelblue") +
geom_line(data = pred_offset_pos_acc68) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", linewidth = 0.5),
text = element_text(family = "Corbel")#,
#axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
)
plot_model_results <- function(is_pos, hpd_area, variable, pred_values,
offset_range, sigma_range, curve_range) {
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc")) %>%
filter(is_pos == is_pos & str_detect(model, hpd_area))
}
plot_model_results(is_pos = TRUE, hpd_area = "68")
plot_model_results <- function(is_pos, hpd_area, variable, pred_values,
offset_range, sigma_range, curve_range) {
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc")) %>%
filter(is_pos == is_pos & str_detect(model, hpd_area))
offset_curve_sigma_os
}
plot_model_results(is_pos = TRUE, hpd_area = "68")
plot_model_results(is_pos = 1, hpd_area = "68")
plot_model_results <- function(is_pos, hpd_area, variable, pred_values,
offset_range, sigma_range, curve_range) {
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc")) %>%
mutate(is_pos = as.numeric(is_pos)) %>% ## Change type for filtering
filter(is_pos == is_pos & str_detect(model, hpd_area))
offset_curve_sigma_os
}
plot_model_results(is_pos = 1, hpd_area = "68")
plot_model_results <- function(is_pos, hpd_area, variable, pred_values,
offset_range, sigma_range, curve_range) {
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc")) %>%
mutate(is_pos = as.character(is_pos)) %>% ## Change type for filtering
filter(is_pos == is_pos & str_detect(model, hpd_area))
offset_curve_sigma_os
}
plot_model_results(is_pos = "TRUE", hpd_area = "68")
plot_model_results <- function(is_pos, hpd_area, variable, pred_values,
offset_range, sigma_range, curve_range) {
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc")) %>%
mutate(is_pos = as.character(is_pos)) %>% ## Change type for filtering
filter(str_detect(is_pos, is_pos) & str_detect(model, hpd_area))
offset_curve_sigma_os
}
plot_model_results(is_pos = "TRUE", hpd_area = "68")
plot_model_results <- function(offset_dir, hpd_area, variable, pred_values,
offset_range, sigma_range, curve_range) {
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc")) %>%
mutate(is_pos = if_else(is_pos, "positive", "negative")) %>% ## Change type for filtering
filter(str_detect(is_pos, offset_dir) & str_detect(model, hpd_area))
offset_curve_sigma_os
}
plot_model_results(offset_dir = "pos", hpd_area = "68")
library(tidyverse)
library(broom)
library(jtools)
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc"))
predict_model_results <- function(offset_dir, hpd_area, variable,
variable_range, rounding) {
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc")) %>%
mutate(is_pos = if_else(is_pos, "positive", "negative")) %>% ## Change type for filtering
filter(str_detect(is_pos, offset_dir) & str_detect(model, hpd_area))
offset_curve_sigma_os
}
predict_model_results(offset_dir = "pos", hpd_area = "68")
### Now load up the model data again, nest it and build the model functions
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc"))
predict_model_results <- function(offset_dir, hpd_area, variable,
variable_range) {
##Function to simplify prediction generation
##Takes on offset_dir and hpd_area, which simplify the results table,
##Takes on variable name as string and variable range as a sequence
##Assumes offset dir, hpd_area, and variable name provided are all correct
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc")) %>%
mutate(is_pos = if_else(is_pos, "positive", "negative")) %>% ## Change type for filtering
filter(str_detect(is_pos, offset_dir) & str_detect(model, hpd_area))
predicted_results <- make_predictions(offset_curve_sigma_os$model_results[[1]],
pred = variable,
pred.values = variable_range)
predicted_results
}
## Function tests
predict_model_results(offset_dir = "pos", hpd_area = "68",
variable = "offset_magnitude",
variable_range = seq(0, 50))
predict_model_results(offset_dir = "neg", hpd_area = "95",
variable = "curve_uncert",
variable_range = seq(10, 35))
predict_model_results(offset_dir = "pos", hpd_area = "95",
variable = "measurement_error",
variable_range = seq(8, 32))
plot_simulation_results_osc <- function(offset_dir, hpd_area, variable,
rounding) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
select(variable)
}
plot_simulation_results_osc(variable = curve_uncert)
plot_simulation_results_osc <- function(offset_dir, hpd_area, variable,
rounding) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
select(variable)
}
plot_simulation_results_osc(variable = curve_uncert)
plot_simulation_results_osc(variable = "curve_uncert")
plot_simulation_results_osc <- function(offset_dir, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
mutate(
variable = plyr::round_any(variable, rounding)
)
select(variable, hpd_area)
}
plot_simulation_results_osc(variable = "curve_uncert", rounding = 5)
plot_simulation_results_osc <- function(offset_dir, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
)
select(variable_to_plot, hpd_area)
}
plot_simulation_results_osc(variable = "curve_uncert", rounding = 5)
plot_simulation_results_osc <- function(offset_dir, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable)# %>%
# mutate(
#   variable_to_plot = plyr::round_any(variable_to_plot, rounding)
# )
# select(variable_to_plot, hpd_area)
}
plot_simulation_results_osc(variable = "curve_uncert", rounding = 5)
plot_simulation_results_osc <- function(offset_dir, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
)
# select(variable_to_plot, hpd_area)
}
plot_simulation_results_osc(variable = "curve_uncert", rounding = 5)
plot_simulation_results_osc <- function(offset_dir, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_area)
}
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_area)
}
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_area)
}
plot_simulation_results_osc(range_to_plot = c(10, 15),
variable = "curve_uncert", rounding = 5)
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_area)
}
plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5)
plot_simulation_results_osc(range_to_plot = c(24, 50), hpd_area = "accuracy_95",
variable = "measurement_error", rounding = 2.5)
plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2)
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_area) %>%
group_by(variable_to_plot) %>%
summarize(
ratio_accurate = mean(hpd_area)
)
}
plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5)
plot_simulation_results_osc(range_to_plot = c(24, 50), hpd_area = "accuracy_95",
variable = "measurement_error", rounding = 2.5)
plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2)
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_area) %>%
group_by(variable_to_plot) #%>%
# summarize(
#   ratio_accurate = mean(hpd_area)
# )
}
plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5)
plot_simulation_results_osc(range_to_plot = c(24, 50), hpd_area = "accuracy_95",
variable = "measurement_error", rounding = 2.5)
plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2)
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable, hpd_to_plot = hpd_area) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_to_plot) %>%
group_by(variable_to_plot) #%>%
# summarize(
#   ratio_accurate = mean(hpd_area)
# )
}
plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5)
plot_simulation_results_osc(range_to_plot = c(24, 50), hpd_area = "accuracy_95",
variable = "measurement_error", rounding = 2.5)
plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2)
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable, hpd_to_plot = hpd_area) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_to_plot) %>%
group_by(variable_to_plot) %>%
summarize(
ratio_accurate = mean(hpd_to_plot)
)
}
plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5)
plot_simulation_results_osc(range_to_plot = c(24, 50), hpd_area = "accuracy_95",
variable = "measurement_error", rounding = 2.5)
plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2)
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable, hpd_to_plot = hpd_area) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_to_plot) %>%
group_by(variable_to_plot) %>%
summarize(
ratio_accurate = mean(hpd_to_plot)
) %>%
ggplot(aes(x = variable_to_plot, y = hpd_to_plot)) +
geom_bar(stat = 'identity')
}
plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5)
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable, hpd_to_plot = hpd_area) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_to_plot) %>%
group_by(variable_to_plot) %>%
summarize(
ratio_accurate = mean(hpd_to_plot)
) %>%
ggplot(aes(x = variable_to_plot, y = ratio_accurate)) +
geom_bar(stat = 'identity')
}
plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5)
plot_simulation_results_osc(range_to_plot = c(24, 50), hpd_area = "accuracy_95",
variable = "measurement_error", rounding = 2.5)
plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2)
