glm(accuracy_68 ~ offset_magnitude + curve_uncert +
offset_magnitude * curve_uncert,
data = singles_data,
family = binomial)
}
sigma_curve_interact_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + curve_uncert +
measurement_error * curve_uncert,
data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_sc_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude + curve_uncert +
measurement_error * curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_oc_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_oc_sc_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * curve_uncert + measurement_error * curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_oc_sc_ocs_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * curve_uncert + measurement_error * curve_uncert +
offset_magnitude * measurement_error * curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_os_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * measurement_error,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_os_cs_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * measurement_error + curve_uncert * measurement_error,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_comb_acc68 <- function(singles_data) {
glm(accuracy_68 ~ offset_magnitude + sigma_curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_comb_interact_acc68 <- function(singles_data) {
glm(accuracy_68 ~ offset_magnitude + sigma_curve_uncert +
offset_magnitude * sigma_curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
## And now have those set up for the 95% HPD ranges -- yes I could have pivoted longer. I know!
offset_curve_acc95 <- function(singles_data) {
glm(accuracy_95 ~ offset_magnitude + curve_uncert, data = singles_data,
family = binomial)
}
sigma_curve_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + curve_uncert, data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_curve_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude + curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_curve_interact_acc95 <- function(singles_data) {
glm(accuracy_95 ~ offset_magnitude + curve_uncert +
offset_magnitude * curve_uncert,
data = singles_data,
family = binomial)
}
sigma_curve_interact_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + curve_uncert +
measurement_error * curve_uncert,
data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_sc_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude + curve_uncert +
measurement_error * curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_oc_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_oc_sc_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * curve_uncert + measurement_error * curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_oc_sc_ocs_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * curve_uncert + measurement_error * curve_uncert +
offset_magnitude * measurement_error * curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_os_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * measurement_error,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_os_cs_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * measurement_error + curve_uncert * measurement_error,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_comb_acc95 <- function(singles_data) {
glm(accuracy_95 ~ offset_magnitude + sigma_curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_comb_interact_acc95 <- function(singles_data) {
glm(accuracy_95 ~ offset_magnitude + sigma_curve_uncert +
offset_magnitude * sigma_curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
### Now load up the model data again, nest it and build the model functions
single_cals_w_curve_uncert <- read_csv("single_cals_w_curve_uncert.csv") %>%
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
##Nesting
single_cals_curve_uncert_nest <- single_cals_curve_uncert %>%
mutate(is_pos = if_else(offset_magnitude >= 0, TRUE, FALSE)) %>%
select(curve_uncert, measurement_error, offset_magnitude, accuracy_68,
accuracy_95, is_pos, sigma_curve_uncert) %>%
group_by(is_pos) %>%
nest()
##Nesting
single_cals_w_curve_uncert_nest <- single_cals_w_curve_uncert %>%
mutate(is_pos = if_else(offset_magnitude >= 0, TRUE, FALSE)) %>%
select(curve_uncert, measurement_error, offset_magnitude, accuracy_68,
accuracy_95, is_pos, sigma_curve_uncert) %>%
group_by(is_pos) %>%
nest()
##Nesting
single_cals_curve_uncert_nest <- single_cals_w_curve_uncert %>%
mutate(is_pos = if_else(offset_magnitude >= 0, TRUE, FALSE)) %>%
select(curve_uncert, measurement_error, offset_magnitude, accuracy_68,
accuracy_95, is_pos, sigma_curve_uncert) %>%
group_by(is_pos) %>%
nest()
### Now lets run the models...
single_cals_curve_uncert_regr <- single_cals_curve_uncert_nest %>%
mutate(
offset_curve_acc68 = map(data, offset_curve_acc68),
offset_curve_acc95 = map(data, offset_curve_acc95),
offset_curve_interact_acc68 = map(data, offset_curve_interact_acc68),
offset_curve_interact_acc95 = map(data, offset_curve_interact_acc95),
offset_sigma_curve_acc68 = map(data, offset_sigma_curve_acc68),
offset_sigma_curve_acc95 = map(data, offset_sigma_curve_acc95),
offset_sigma_curve_interact_oc_acc68 =
map(data, offset_sigma_curve_interact_oc_acc68),
offset_sigma_curve_interact_oc_acc95 =
map(data, offset_sigma_curve_interact_oc_acc95),
offset_sigma_curve_interact_oc_sc_acc68 =
map(data, offset_sigma_curve_interact_oc_sc_acc68),
offset_sigma_curve_interact_oc_sc_acc95 =
map(data, offset_sigma_curve_interact_oc_sc_acc95),
offset_sigma_curve_interact_oc_sc_ocs_acc68 =
map(data, offset_sigma_curve_interact_oc_sc_ocs_acc68),
offset_sigma_curve_interact_oc_sc_ocs_acc95 =
map(data, offset_sigma_curve_interact_oc_sc_ocs_acc95),
offset_sigma_curve_interact_os_acc68 =
map(data, offset_sigma_curve_interact_os_acc68),
offset_sigma_curve_interact_os_acc95 =
map(data, offset_sigma_curve_interact_os_acc95),
offset_sigma_curve_interact_os_cs_acc68 =
map(data, offset_sigma_curve_interact_os_cs_acc68),
offset_sigma_curve_interact_os_cs_acc95 =
map(data, offset_sigma_curve_interact_os_cs_acc95),
offset_sigma_curve_comb_acc68 =
map(data, offset_sigma_curve_comb_acc68),
offset_sigma_curve_comb_acc95 =
map(data, offset_sigma_curve_comb_acc95),
offset_sigma_curve_comb_interact_acc68 =
map(data, offset_sigma_curve_comb_interact_acc68),
offset_sigma_curve_comb_interact_acc95 =
map(data, offset_sigma_curve_comb_interact_acc95)
)
### Lets re-orgnize the table to make parameter extraction easier.
single_cals_curve_uncert_regr <- single_cals_curve_uncert_regr %>%
select(-data) %>%
pivot_longer(!is_pos, names_to = "model", values_to = "model_results")
saveRDS(single_cals_curve_uncert_regr, "single_cals_curve_uncert_regr.rds")
single_cals_curve_uncert_regr <- readRDS("single_cals_curve_uncert_regr.rds")
### Extract the diagnostics
single_cals_curve_uncert_diag <- single_cals_curve_uncert_regr %>%
mutate(model_diags = map(model_results, glance)) %>%
select(-model_results) %>%
unnest(cols = c(model_diags))
### Now the visualization
single_cals_curve_uncert_diag %>%
mutate(
offset_direction = if_else(is_pos, "Positive", "Negative"),
hpd_area = if_else(str_detect(model, "68"), "68.2% HPD Area", "95.4% HPD Area"),
model = str_remove_all(model, "_acc\\d{2}")
) %>%
ggplot(aes(x = model, y = AIC)) +
geom_bar(stat = "identity", fill = "steelblue", color = "grey40") +
facet_grid(rows = vars(hpd_area), cols = vars(offset_direction), scales = "free") +
labs(
x = "Model",
subtitle = "AIC of different models that include curve uncertainty"
) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", size = 0.5),
#legend.position = "none",
strip.background = element_rect(
color="white", fill="white"
),
text = element_text(family = "Corbel"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
)
single_cals_curve_uncert_diag %>%
mutate(
offset_direction = if_else(is_pos, "Positive", "Negative"),
hpd_area = if_else(str_detect(model, "68"), "68.2% HPD Area", "95.4% HPD Area"),
model = str_remove_all(model, "_acc\\d{2}")
) %>%
ggplot(aes(x = model, y = BIC)) +
geom_bar(stat = "identity", fill = "steelblue", color = "grey40") +
facet_grid(rows = vars(hpd_area), cols = vars(offset_direction), scales = "free") +
labs(
x = "Model",
subtitle = "BIC of different models that include curve uncertainty"
) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", size = 0.5),
#legend.position = "none",
strip.background = element_rect(
color="white", fill="white"
),
text = element_text(family = "Corbel"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
)
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_w_curve_uncert.csv") %>%
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable, hpd_to_plot = hpd_area) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_to_plot) %>%
group_by(variable_to_plot) %>%
summarize(
ratio_accurate = mean(hpd_to_plot)
) %>%
ggplot(aes(x = variable_to_plot, y = ratio_accurate)) +
geom_bar(stat = 'identity', fill = "steelblue") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", linewidth = 0.5),
text = element_text(family = "Corbel")#,
#axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
) +
labs(
y = "Ratio accurate",
x = xlab
)
}
plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5,
xlab = "Calibration curve uncertainty")
plot_simulation_results_osc(range_to_plot = c(24, 50), hpd_area = "accuracy_95",
variable = "measurement_error", rounding = 2.5,
xlab = "Measurement uncertainty")
plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2,
xlab = "Offset magnitude")
##Get the results out
offset_curve_sigma_comb_params <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "comb_acc")) %>%
mutate(model_results = map(model_results, tidy)) %>%
unnest(cols = c(model_results))
## Visualize version without interaction
offset_curve_sigma_comb_params %>%
mutate(
is_pos = if_else(is_pos, "pos_offset", "neg_offset"),
hpd_area = if_else(str_detect(model, "68"), "68.2% HPD", "95.4% HPD")
) %>%
ggplot(aes(x = is_pos, y = estimate)) +
geom_hline(yintercept = 0, color = "grey80") +
geom_point(stat = "identity") +
geom_linerange(aes(ymin = estimate - 2*std.error, ymax = estimate + 2*std.error)) +
facet_grid(rows = vars(term), cols = vars(hpd_area), scales = "free") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", size = 0.5),
#legend.position = "none",
strip.background = element_rect(
color="white", fill="white"
),
text = element_text(family = "Corbel"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
) +
labs(
subtitle = "68.2% HPD"
)
##Get the results out
offset_curve_sigma_comb_interact_params <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "comb_inter")) %>%
mutate(model_results = map(model_results, tidy)) %>%
unnest(cols = c(model_results))
## Visualize version with interaction
offset_curve_sigma_comb_interact_params %>%
mutate(
is_pos = if_else(is_pos, "pos_offset", "neg_offset"),
hpd_area = if_else(str_detect(model, "68"), "68.2% HPD", "95.4% HPD")
) %>%
ggplot(aes(x = is_pos, y = estimate)) +
geom_hline(yintercept = 0, color = "grey80") +
geom_point(stat = "identity") +
geom_linerange(aes(ymin = estimate - 2*std.error, ymax = estimate + 2*std.error)) +
facet_grid(rows = vars(term), cols = vars(hpd_area), scales = "free") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", size = 0.5),
#legend.position = "none",
strip.background = element_rect(
color="white", fill="white"
),
text = element_text(family = "Corbel"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
) +
labs(
subtitle = "68.2% HPD"
)
offset_curve_sigma_comb_params %>%
filter(str_detect(term, "Interce")) %>%
select(is_pos, model, estimate) %>%
mutate(acc_zero = 1 / (1 + exp(- estimate)))
offset_curve_sigma_comb_interact_params %>%
filter(str_detect(term, "Interce")) %>%
select(is_pos, model, estimate) %>%
mutate(acc_zero = 1 / (1 + exp(- estimate)))
offset_curve_sigma_comb_params %>%
filter(str_detect(term, "Interce")) %>%
select(is_pos, model, estimate, std.error) %>%
mutate(
acc_zero = 1 / (1 + exp(- estimate)),
acc_zero_min = 1 / (1 + exp(- (estimate - 2 * std.error))),
acc_zero_max = 1 / (1 + exp(- (estimate + 2 * std.error))),
)
predict_model_results_osc <- function(offset_dir, hpd_area, model_name,
variable, variable_range) {
##Function to simplify prediction generation
##Takes on offset_dir and hpd_area, which simplify the results table,
##Takes on variable name as string and variable range as a sequence
##Assumes offset dir, hpd_area, and variable name provided are all correct
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, model_name)) %>%
mutate(is_pos = if_else(is_pos, "positive", "negative")) %>% ## Change type for filtering
filter(str_detect(is_pos, offset_dir) & str_detect(model, hpd_area))
predicted_results <- make_predictions(offset_curve_sigma_os$model_results[[1]],
pred = variable,
pred.values = variable_range)
predicted_results
}
#### Oooohhh... it works without modification... Thank you past me!
## Function tests
predict_model_results_osc(offset_dir = "pos", hpd_area = "68",
model_name = "comb_acc",
variable = "offset_magnitude",
variable_range = seq(0, 50))
predict_model_results_osc(offset_dir = "neg", hpd_area = "95",
model_name = "comb_acc",
variable = "sigma_curve_uncert",
variable_range = seq(10, 35))
plot_model_predictions_ocs <- function(offset_dir, hpd_area, model_name, variable,
range, rounding, xlab) {
## This function wraps predict_model_results and plot_simulation_results and plots prediction over simulation.
## parameters and assumptions as per underpinning functions.
plot <- plot_simulation_results_osc(range_to_plot = range, hpd_area = hpd_area,
variable = variable, rounding = rounding,
xlab = xlab)
hpd_for_predict = str_extract(hpd_area, "\\d{2}") ## predict_model_results only takes two-digit numbers as input here (for filtering) - this extracts from HPD area above
predicts_tab <- predict_model_results_osc(offset_dir = offset_dir,
hpd_area = hpd_for_predict,
model_name = model_name,
variable = variable,
variable_range = seq(range[1],
range[2]))
predicts_tab <- predicts_tab %>%
rename("variable_to_plot" = variable, ratio_accurate = 1) ##Dovetail the variable names for the plot at the iteration where interactions start getting explored
plot <- plot +
geom_line(data = predicts_tab)
plot
}
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
model_name = "comb_acc",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset magnitude")
plot_model_predictions_ocs(offset_dir = "neg", hpd_area = "accuracy_68",
model_name = "comb_acc",
variable = "offset_magnitude",
range = c(-50, 0), rounding = 2.5,
xlab = "Offset magnitude")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_95",
model_name = "comb_acc",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset magnitude")
plot_model_predictions_ocs(offset_dir = "neg", hpd_area = "accuracy_95",
model_name = "comb_acc",
variable = "offset_magnitude",
range = c(-50, 0), rounding = 2.5,
xlab = "Offset magnitude")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
variable = "sigma_curve_uncert",
model_name = "comb_acc",
range = c(10, 40), rounding = 2,
xlab = "Measurement and curve error")
plot_model_predictions_ocs(offset_dir = "neg", hpd_area = "accuracy_68",
variable = "sigma_curve_uncert",
model_name = "comb_acc",
range = c(10, 40), rounding = 2,
xlab = "Measurement and curve error")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_95",
variable = "sigma_curve_uncert",
model_name = "comb_acc",
range = c(10, 40), rounding = 2,
xlab = "Measurement and curve error")
plot_model_predictions_ocs(offset_dir = "neg", hpd_area = "accuracy_95",
variable = "sigma_curve_uncert",
model_name = "comb_acc",
range = c(10, 40), rounding = 2,
xlab = "Measurement and curve error")
library(tidyverse)
library(broom)
library(jtools)
library(rstan)
stan_offset_sigma_curve_comb_acc95 <- function(singles_data) {
stan_glm(accuracy_95 ~ offset_magnitude + sigma_curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
##Read and nest the data
single_cals_w_curve_uncert <- read_csv("single_cals_w_curve_uncert.csv")
##Nesting
single_cals_curve_uncert_nest <- single_cals_w_curve_uncert %>%
mutate(is_pos = if_else(offset_magnitude >= 0, TRUE, FALSE)) %>%
select(curve_uncert, measurement_error, offset_magnitude, accuracy_68,
accuracy_95, is_pos) %>%
group_by(is_pos) %>%
nest()
###Test the STAN functions
single_cals_curve_uncert_nest %>%
filter(is_pos)
###Test the STAN functions
test <- single_cals_curve_uncert_nest %>%
filter(is_pos) %>%
stan_offset_sigma_curve_comb_acc95()
library(tidyverse)
library(broom)
library(jtools)
library(rstan)
install.packages("rstanarm")
install.packages("lme4")
install.packages("nloptr")
install.packages("rstanarm")
library(rstanarm)
###Test the STAN functions
test <- single_cals_curve_uncert_nest %>%
filter(is_pos) %>%
stan_offset_sigma_curve_comb_acc95()
###Test the STAN functions
test <- single_cals_curve_uncert_nest %>%
filter(is_pos) %>%
stan_offset_sigma_curve_comb_acc95(singles_data = data)
###Test the STAN functions
test <- single_cals_w_curve_uncert %>%
filter(is_pos) %>%
stan_glm(accuracy_95 ~ offset_magnitude + sigma_curve_uncert,
family = binomial(link = 'logit'))
###Test the STAN functions
test <- single_cals_w_curve_uncert %>%
filter(offset_magnitude > 0) %>%
stan_glm(accuracy_95 ~ offset_magnitude + sigma_curve_uncert,
family = binomial(link = 'logit'))
###Test the STAN functions
test_df <- single_cals_w_curve_uncert %>%
filter(offset_magnitude > 0)
test_result <- stan_glm(accuracy_95 ~ offset_magnitude + sigma_curve_uncert,
data = test_df, family = binomial(link = 'logit'))
summary(test_result)
test_result <- stan_glm(accuracy_68 ~ offset_magnitude + sigma_curve_uncert,
data = test_df, family = binomial(link = 'logit'))
summary(test_result)
test_result <- stan_glm(accuracy_95 ~ offset_magnitude + sigma_curve_uncert,
data = test_df, family = binomial(link = 'logit'))
summary(test_result)
