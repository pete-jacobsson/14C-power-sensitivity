labs(x = "Cal yrs BP")
## Lets make some plots
single_cals_log_diagnostics %>%
mutate(
offset_pos = if_else(offset_pos, "Pos offset", "Neg offset")
) %>%
filter(str_detect(model, "68")) %>%
ggplot(aes(x = target_year, y = AIC)) +
geom_line(aes(color = model)) +
facet_wrap(~offset_pos) +
theme_bw() +
scale_color_manual(values = c("darkblue", "blue", "steelblue", "gray")) +
theme(
panel.grid.minor = element_blank(),
strip.background = element_rect(
color="black", fill="white"
),
text = element_text(family = "Corbel")
) +
labs(x = "Cal yrs BP")
single_cals_log_diagnostics %>%
mutate(
offset_pos = if_else(offset_pos, "Pos offset", "Neg offset")
) %>%
filter(str_detect(model, "68")) %>%
ggplot(aes(x = target_year, y = BIC)) +
geom_line(aes(color = model)) +
facet_wrap(~offset_pos, labeller = labeller(c("Pos offset", "Neg offset"))) +
theme_bw() +
scale_color_manual(values = c("darkblue", "blue", "steelblue", "gray")) +
theme(
panel.grid.minor = element_blank(),
strip.background = element_rect(
color="black", fill="white"
)) +
labs(x = "Cal yrs BP")
single_cals_log_diagnostics %>%
mutate(
offset_pos = if_else(offset_pos, "Pos offset", "Neg offset")
) %>%
filter(str_detect(model, "95")) %>%
ggplot(aes(x = target_year, y = AIC)) +
geom_line(aes(color = model)) +
facet_wrap(~offset_pos) +
theme_bw()+
scale_color_manual(values = c("darkblue", "blue", "steelblue", "gray")) +
theme(
panel.grid.minor = element_blank(),
strip.background = element_rect(
color="black", fill="white"
)) +
labs(x = "Cal yrs BP")
single_cals_log_diagnostics %>%
mutate(
offset_pos = if_else(offset_pos, "Pos offset", "Neg offset")
) %>%
filter(str_detect(model, "95")) %>%
ggplot(aes(x = target_year, y = BIC)) +
geom_line(aes(color = model)) +
facet_wrap(~offset_pos) +
theme_bw() +
scale_color_manual(values = c("darkblue", "blue", "steelblue", "gray")) +
theme(
panel.grid.minor = element_blank(),
strip.background = element_rect(
color="black", fill="white"
)) +
labs(x = "Cal yrs BP")
single_cals_log_results %>%
filter(str_detect(model, "interact") & !str_detect(term, "Intercept")) %>%
filter(!(target_year %in% c(7019, 7751, 9076, 11091) &
str_detect(model, "95"))) %>%  ## This removes extreme values of the 95% model in the visualizations
mutate(
offset_pos = if_else(offset_pos, "Pos offset", "Neg offset"),
model = if_else(str_detect(model, "68"), "68.2% HPD", "95.4% HPD")
) %>%
ggplot(aes(x = target_year, y = estimate)) +
geom_ribbon(aes(ymin = estimate - std.error * 2,
ymax = estimate + std.error * 2,
fill = term), alpha = 0.2, color = "grey75") +
geom_line(aes(color = term), linetype = "dotted") +
facet_grid(cols = vars(offset_pos), rows = vars(model)) +
ylim(c(-2, 2)) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
strip.background = element_rect(
color="black", fill="white"
),
text = element_text(family = "Corbel")
)) +
single_cals_log_results %>%
filter(str_detect(model, "interact") & !str_detect(term, "Intercept")) %>%
filter(!(target_year %in% c(7019, 7751, 9076, 11091) &
str_detect(model, "95"))) %>%  ## This removes extreme values of the 95% model in the visualizations
mutate(
offset_pos = if_else(offset_pos, "Pos offset", "Neg offset"),
model = if_else(str_detect(model, "68"), "68.2% HPD", "95.4% HPD")
) %>%
ggplot(aes(x = target_year, y = estimate)) +
geom_ribbon(aes(ymin = estimate - std.error * 2,
ymax = estimate + std.error * 2,
fill = term), alpha = 0.2, color = "grey75") +
geom_line(aes(color = term), linetype = "dotted") +
facet_grid(cols = vars(offset_pos), rows = vars(model)) +
ylim(c(-2, 2)) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
strip.background = element_rect(
color="black", fill="white"
),
text = element_text(family = "Corbel")
) +
scale_fill_manual(values = c("steelblue", "grey50", "darkblue"))
single_cals_log_results %>%
filter(!str_detect(model, "95") & !str_detect(model, "sigma_only")) %>%
ggplot(aes(x = target_year, y = estimate)) +
geom_line(aes(color = model))
single_cals_log_results %>%
filter(str_detect(model, "interact") & !str_detect(term, "Intercept")) %>%
filter(!(target_year %in% c(7019, 7751, 9076, 11091) &
str_detect(model, "95"))) %>%  ## This removes extreme values of the 95% model in the visualizations
mutate(
offset_pos = if_else(offset_pos, "Pos offset", "Neg offset"),
model = if_else(str_detect(model, "68"), "68.2% HPD", "95.4% HPD")
) %>%
ggplot(aes(x = target_year, y = estimate)) +
geom_ribbon(aes(ymin = estimate - std.error * 2,
ymax = estimate + std.error * 2,
fill = term), alpha = 0.2, color = "grey75") +
geom_line(aes(color = term), linetype = "dotted") +
facet_grid(cols = vars(offset_pos), rows = vars(model)) +
ylim(c(-2, 2)) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
strip.background = element_rect(
color="black", fill="white"
),
text = element_text(family = "Corbel")
) +
scale_fill_manual(name = "", values = c("steelblue", "grey50", "darkblue"))
single_cals_log_results %>%
filter(str_detect(model, "interact") & !str_detect(term, "Intercept")) %>%
filter(!(target_year %in% c(7019, 7751, 9076, 11091) &
str_detect(model, "95"))) %>%  ## This removes extreme values of the 95% model in the visualizations
mutate(
offset_pos = if_else(offset_pos, "Pos offset", "Neg offset"),
model = if_else(str_detect(model, "68"), "68.2% HPD", "95.4% HPD")
) %>%
ggplot(aes(x = target_year, y = estimate)) +
geom_ribbon(aes(ymin = estimate - std.error * 2,
ymax = estimate + std.error * 2,
fill = term), alpha = 0.2, color = "grey75") +
geom_line(aes(color = term), linetype = "dotted") +
facet_grid(cols = vars(offset_pos), rows = vars(model)) +
ylim(c(-2, 2)) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
strip.background = element_rect(
color="black", fill="white"
),
text = element_text(family = "Corbel")
) +
scale_fill_manual(name = "", values = c("steelblue", "grey50", "darkblue")) +
scale_color_discrete(name = "")
single_cals_log_results %>%
filter(!str_detect(model, "95") & !str_detect(model, "sigma_only")) %>%
ggplot(aes(x = target_year, y = estimate)) +
geom_ribbon(aes(ymin = estimate - std.error * 2,
ymax = estimate + std.error * 2,
fill = term), alpha = 0.2, color = "grey75") +
geom_line(aes(color = model)) +
facet_grid(cols = vars(offset_pos), rows = vars(term))
single_cals_log_results %>%
filter(!str_detect(model, "95") & !str_detect(model, "sigma_only")) %>%
filter(!str_detect(term, "Intercept")) %>%
ggplot(aes(x = target_year, y = estimate)) +
geom_ribbon(aes(ymin = estimate - std.error * 2,
ymax = estimate + std.error * 2,
fill = term), alpha = 0.2, color = "grey75") +
geom_line(aes(color = model)) +
facet_grid(cols = vars(offset_pos), rows = vars(term))
single_cals_log_results %>%
filter(!str_detect(model, "95") &
!str_detect(model, "sigma_only") &
!str_detect(term, "Intercept") &
!str_detect(term, "error:offset")) %>%
ggplot(aes(x = target_year, y = estimate)) +
geom_ribbon(aes(ymin = estimate - std.error * 2,
ymax = estimate + std.error * 2,
fill = term), alpha = 0.2, color = "grey75") +
geom_line(aes(color = model)) +
facet_grid(cols = vars(offset_pos), rows = vars(term))
single_cals_log_results %>%
filter(!str_detect(model, "95") &
!str_detect(model, "sigma_only") &
!str_detect(term, "Intercept") &
!str_detect(term, "error:offset")) %>%
ggplot(aes(x = target_year, y = estimate)) +
geom_ribbon(aes(ymin = estimate - std.error * 2,
ymax = estimate + std.error * 2,
fill = model, alpha = 0.2, color = "grey75") +
geom_line(aes(color = model)) +
facet_grid(cols = vars(offset_pos), rows = vars(term))
single_cals_log_results %>%
filter(!str_detect(model, "95") &
!str_detect(model, "sigma_only") &
!str_detect(term, "Intercept") &
!str_detect(term, "error:offset")) %>%
ggplot(aes(x = target_year, y = estimate)) +
geom_ribbon(aes(ymin = estimate - std.error * 2,
ymax = estimate + std.error * 2,
fill = model), alpha = 0.2, color = "grey75") +
geom_line(aes(color = model)) +
facet_grid(cols = vars(offset_pos), rows = vars(term))
single_cals_log_results %>%
filter(!str_detect(model, "95") &
!str_detect(model, "sigma_only") &
!str_detect(term, "Intercept") &
!str_detect(term, "error:offset")) %>%  ## This removes extreme values of the 95% model in the visualizations
mutate(
offset_pos = if_else(offset_pos, "Pos offset", "Neg offset")
)%>%
ggplot(aes(x = target_year, y = estimate)) +
geom_ribbon(aes(ymin = estimate - std.error * 2,
ymax = estimate + std.error * 2,
fill = model), alpha = 0.2, color = "grey75") +
geom_line(aes(color = model)) +
facet_grid(cols = vars(offset_pos), rows = vars(term))
single_cals_log_results %>%
filter(!str_detect(model, "95") &
!str_detect(model, "sigma_only") &
!str_detect(term, "Intercept") &
!str_detect(term, "error:offset")) %>%  ## This removes extreme values of the 95% model in the visualizations
mutate(
offset_pos = if_else(offset_pos, "Pos offset", "Neg offset")
)%>%
ggplot(aes(x = target_year, y = estimate)) +
geom_ribbon(aes(ymin = estimate - std.error * 2,
ymax = estimate + std.error * 2,
fill = model), alpha = 0.2, color = "grey75") +
geom_line(aes(color = model)) +
facet_grid(cols = vars(offset_pos), rows = vars(term)) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
strip.background = element_rect(
color="black", fill="white"
),
text = element_text(family = "Corbel")
) +
scale_fill_manual(name = "", values = c("steelblue", "grey50", "darkblue")) +
scale_color_discrete(name = "")
single_cals_log_results %>%
filter(!str_detect(model, "95") &
!str_detect(model, "sigma_only") &
!str_detect(term, "Intercept") &
!str_detect(term, "error:offset")) %>%  ## This removes extreme values of the 95% model in the visualizations
mutate(
offset_pos = if_else(offset_pos, "Pos offset", "Neg offset")
)%>%
ggplot(aes(x = target_year, y = estimate)) +
geom_hline(yintercept = 0, size = 2) +
geom_ribbon(aes(ymin = estimate - std.error * 2,
ymax = estimate + std.error * 2,
fill = model), alpha = 0.2, color = "grey75") +
geom_line(aes(color = model)) +
facet_grid(cols = vars(offset_pos), rows = vars(term)) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
strip.background = element_rect(
color="black", fill="white"
),
text = element_text(family = "Corbel")
) +
scale_fill_manual(name = "", values = c("steelblue", "grey50", "darkblue")) +
scale_color_discrete(name = "")
single_cals_log_results %>%
filter(!str_detect(model, "95") &
!str_detect(model, "sigma_only") &
!str_detect(term, "Intercept") &
!str_detect(term, "error:offset")) %>%  ## This removes extreme values of the 95% model in the visualizations
mutate(
offset_pos = if_else(offset_pos, "Pos offset", "Neg offset")
)%>%
ggplot(aes(x = target_year, y = estimate)) +
geom_hline(yintercept = 0, size = 1) +
geom_ribbon(aes(ymin = estimate - std.error * 2,
ymax = estimate + std.error * 2,
fill = model), alpha = 0.2, color = "grey75") +
geom_line(aes(color = model)) +
facet_grid(cols = vars(offset_pos), rows = vars(term)) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
strip.background = element_rect(
color="black", fill="white"
),
text = element_text(family = "Corbel")
) +
scale_fill_manual(name = "", values = c("steelblue", "grey50", "darkblue")) +
scale_color_discrete(name = "")
single_cals_log_results %>%
filter(!str_detect(model, "95") &
!str_detect(model, "sigma_only") &
!str_detect(term, "Intercept") &
!str_detect(term, "error:offset")) %>%  ## This removes extreme values of the 95% model in the visualizations
mutate(
offset_pos = if_else(offset_pos, "Pos offset", "Neg offset")
)%>%
ggplot(aes(x = target_year, y = estimate)) +
geom_hline(yintercept = 0, size = 1) +
geom_ribbon(aes(ymin = estimate - std.error * 2,
ymax = estimate + std.error * 2,
fill = model), alpha = 0.2, color = "grey75") +
geom_line(aes(color = model)) +
facet_grid(cols = vars(offset_pos), rows = vars(term)) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
strip.background = element_rect(
color="black", fill="white"
),
text = element_text(family = "Corbel")
) +
scale_fill_manual(name = "Model", values = c("steelblue", "grey50", "darkblue")) +
scale_color_discrete(name = "Model")
single_cals_log_results %>%
filter(str_detect(model, "interact") & !str_detect(term, "Intercept")) %>%
filter(!(target_year %in% c(7019, 7751, 9076, 11091) &
str_detect(model, "95"))) %>%  ## This removes extreme values of the 95% model in the visualizations
mutate(
offset_pos = if_else(offset_pos, "Pos offset", "Neg offset"),
model = if_else(str_detect(model, "68"), "68.2% HPD", "95.4% HPD")
) %>%
ggplot(aes(x = target_year, y = estimate)) +
geom_ribbon(aes(ymin = estimate - std.error * 2,
ymax = estimate + std.error * 2,
fill = term), alpha = 0.2, color = "grey75") +
geom_line(aes(color = term), linetype = "dotted") +
facet_grid(cols = vars(offset_pos), rows = vars(model)) +
ylim(c(-2, 2)) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
strip.background = element_rect(
color="black", fill="white"
),
text = element_text(family = "Corbel")
) +
scale_fill_manual(name = "Parameter", values = c("steelblue", "grey50", "darkblue")) +
scale_color_discrete(name = "Parameter")
single_cals_log_results %>%
filter(!str_detect(model, "95") &
!str_detect(model, "sigma_only") &
!str_detect(term, "Intercept") &
!str_detect(term, "error:offset")) %>%  ## This removes extreme values of the 95% model in the visualizations
mutate(
offset_pos = if_else(offset_pos, "Pos offset", "Neg offset")
)%>%
ggplot(aes(x = target_year, y = estimate)) +
geom_hline(yintercept = 0, size = 0.5) +
geom_ribbon(aes(ymin = estimate - std.error * 2,
ymax = estimate + std.error * 2,
fill = model), alpha = 0.2, color = "grey75") +
geom_line(aes(color = model)) +
facet_grid(cols = vars(offset_pos), rows = vars(term)) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
strip.background = element_rect(
color="black", fill="white"
),
text = element_text(family = "Corbel")
) +
scale_fill_manual(name = "Model", values = c("steelblue", "grey50", "darkblue")) +
scale_color_discrete(name = "Model")
## this will get a little messy. In order for the thing to work efficiently, it will be easier to pivot the table wider
single_cals_log_results_wider <- single_cals_log_results %>%
filter(str_detect(model, "interaction"))
## this will get a little messy. In order for the thing to work efficiently, it will be easier to pivot the table wider
single_cals_log_results_wider <- single_cals_log_results %>%
filter(str_detect(model, "interact"))
## this will get a little messy. In order for the thing to work efficiently, it will be easier to pivot the table wider
single_cals_log_results_wider <- single_cals_log_results %>%
filter(str_detect(model, "interact")) %>%
pivot_wider(names_from = term, values_from = c(estimate, std.error))
View(single_cals_log_results_wider)
## this will get a little messy. In order for the thing to work efficiently, it will be easier to pivot the table wider
single_cals_log_results_wider <- single_cals_log_results %>%
filter(str_detect(model, "interact")) %>%
select(-statistic, -p.vlaue)
## this will get a little messy. In order for the thing to work efficiently, it will be easier to pivot the table wider
single_cals_log_results_wider <- single_cals_log_results %>%
filter(str_detect(model, "interact")) %>%
select(-c(statistic, p.vlaue))
## this will get a little messy. In order for the thing to work efficiently, it will be easier to pivot the table wider
single_cals_log_results_wider <- single_cals_log_results %>%
filter(str_detect(model, "interact")) %>%
select(!c(statistic, p.value))
View(single_cals_log_results_wider)
## this will get a little messy. In order for the thing to work efficiently, it will be easier to pivot the table wider
single_cals_log_results_wider <- single_cals_log_results %>%
filter(str_detect(model, "interact")) %>%
select(!c(statistic, p.value)) %>%
pivot_wider(names_from = term, values_from = c(estimate, std.error))
View(single_cals_log_results_wider)
## this will get a little messy. In order for the thing to work efficiently, it will be easier to pivot the table wider
single_cals_log_results_wider_pos <- single_cals_log_results %>%
filter(str_detect(model, "interact") & offset_pos) %>%
select(!c(statistic, p.value)) %>%
pivot_wider(names_from = term, values_from = c(estimate, std.error))
single_cals_log_results_wider_neg <- single_cals_log_results %>%
filter(str_detect(model, "interact") & !offset_pos) %>%
select(!c(statistic, p.value)) %>%
pivot_wider(names_from = term, values_from = c(estimate, std.error))
single_cals_log_results <- read_csv("model_results/single_cals_log_results.csv")
library(tidyverse)
library(broom)
single_cals_log_results <- read_csv("model_results/single_cals_log_results.csv")
## this will get a little messy. In order for the thing to work efficiently, it will be easier to pivot the table wider
single_cals_log_results_wider_pos <- single_cals_log_results %>%
filter(str_detect(model, "interact") & offset_pos) %>%
select(!c(statistic, p.value)) %>%
pivot_wider(names_from = term, values_from = c(estimate, std.error))
single_cals_log_results_wider_neg <- single_cals_log_results %>%
filter(str_detect(model, "interact") & !offset_pos) %>%
select(!c(statistic, p.value)) %>%
pivot_wider(names_from = term, values_from = c(estimate, std.error))
neg_offset_dif <- c()
for (i in 2:100) {
## Yes we're doing this with a for loop, using the knowledge that the tables have 100 observations each.
neg_offset_mu_curr <- single_cals_log_results_wider_neg$estimate_offset_magnitude[i]
neg_offset_mu_prev <- single_cals_log_results_wider_neg$estimate_offset_magnitude[i-1]
neg_offset_sd_curr <- single_cals_log_results_wider_neg$std.error_offset_magnitude[i]
neg_offset_sd_prev <- single_cals_log_results_wider_neg$std.error_offset_magnitude[i-1]
neg_offset_norm_dif <- (neg_offset_mu_curr - neg_offset_mu_prev) /
sqrt((neg_offset_sd_curr^2 + neg_offset_sd_prev^2) / 2)
neg_offset_dif <- c(neg_offset_dif, neg_offset_norm_dif)
}
neg_offset_dif
View(single_cals_log_results_wider_neg)
shiny::runApp('sensitivity_shiny')
library(tidyverse)
library(broom)
single_cals_log_results <- read_csv("model_results/single_cals_log_results.csv")
estimate_running_diff <- function(estimates_vector, stdev_vector) {
}
## this will get a little messy. In order for the thing to work efficiently, it will be easier to pivot the table wider
single_cals_log_results_wider_pos <- single_cals_log_results %>%
filter(str_detect(model, "interact") & offset_pos) %>%
select(!c(statistic, p.value)) %>%
pivot_wider(names_from = term, values_from = c(estimate, std.error))
single_cals_log_results_wider_neg <- single_cals_log_results %>%
filter(str_detect(model, "interact") & !offset_pos) %>%
select(!c(statistic, p.value)) %>%
pivot_wider(names_from = term, values_from = c(estimate, std.error))
estimate_running_diff <- function(estimates_vector, stdev_vector) {
}
estimate_running_diff(single_cals_log_results_wider_neg$estimate_offset_magnitude,
single_cals_log_results_wider_neg$std.error_offset_magnitude)
estimate_running_diff <- function(estimates, stdevs) {
###Note assumptions: vectors longer than two, and equal length!
###If ever planned to publish the function would need a check and a warning for input lengths!
difs <- c() ## our results will go here
for (i in 2 : length(estimates)) {
estimate_curr <- estimates[i] # A flourish - makes it easier for the likes of me to read!
estimate_prev <- estimates[i-1]
stdev_curr <- stdevs[i]
stdevs_prev <- stdevs[i-1]
}
c(estimate_curr, estimate_prev, stdev_curr, stdev_prev)
}
estimate_running_diff(single_cals_log_results_wider_neg$estimate_offset_magnitude,
single_cals_log_results_wider_neg$std.error_offset_magnitude)
estimate_running_diff <- function(estimates, stdevs) {
###Note assumptions: vectors longer than two, and equal length!
###If ever planned to publish the function would need a check and a warning for input lengths!
difs <- c() ## our results will go here
for (i in 2 : length(estimates)) {
estimate_curr <- estimates[i] # A flourish - makes it easier for the likes of me to read!
estimate_prev <- estimates[i-1]
stdevs_curr <- stdevs[i]
stdevs_prev <- stdevs[i-1]
}
c(estimate_curr, estimate_prev, stdevs_curr, stdevs_prev)
}
estimate_running_diff(single_cals_log_results_wider_neg$estimate_offset_magnitude,
single_cals_log_results_wider_neg$std.error_offset_magnitude)
View(single_cals_log_results_wider_neg)
estimate_running_diff <- function(estimates, stdevs) {
###Note assumptions: vectors longer than two, and equal length!
###If ever planned to publish the function would need a check and a warning for input lengths!
difs <- c() ## our results will go here
for (i in 2 : length(estimates)) {
estimate_curr <- estimates[i] # A flourish - makes it easier for the likes of me to read!
estimate_prev <- estimates[i-1]
stdev_curr <- stdevs[i]
stdev_prev <- stdevs[i-1]
estimate_diff <- (estimate_curr - estimate_prev) /
(sqrt((stdev_curr^2 + stdev_prev^2)/2))
difs <- c(difs, estimate_diff)
}
difs
}
estimate_running_diff(single_cals_log_results_wider_neg$estimate_offset_magnitude,
single_cals_log_results_wider_neg$std.error_offset_magnitude)
shiny::runApp('sensitivity_shiny')
