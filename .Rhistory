osc_interact_params_wider %>%
filter(is_pos == (offset >= 0), str_detect(model, hpd)) %>%
mutate(
exp_term = `(Intercept)` + offset_magnitude * offset +
measurement_error * error +
curve_uncert * curve_sigma +
`offset_magnitude:curve_uncert` * offset * curve_sigma
)
}
estimate_precision(offset = 0, error = 8, curve_uncert = 20, hpd = "95")
estimate_precision(offset = 0, error = 8, curve_sigma = 20, hpd = "95")
estimate_precision <- function(offset, error, curve_sigma, hpd) {
osc_interact_params_wider %>%
filter(is_pos == (offset >= 0), str_detect(model, hpd)) %>%
mutate(
exp_term = `(Intercept)` + offset_magnitude * offset +
measurement_error * error +
curve_uncert * curve_sigma +
`offset_magnitude:curve_uncert` * offset * curve_sigma +
`measurement_error:curve_uncert` * error * curve_sigma +
`measurement_error:offset_magnitude` * error * offset_magnitude
)
}
estimate_precision(offset = 0, error = 8, curve_sigma = 20, hpd = "95")
estimate_precision <- function(offset, error, curve_sigma, hpd) {
osc_interact_params_wider %>%
filter(is_pos == (offset >= 0), str_detect(model, hpd)) %>%
mutate(
exp_term = `(Intercept)` + offset_magnitude * offset +
measurement_error * error +
curve_uncert * curve_sigma +
`offset_magnitude:curve_uncert` * offset * curve_sigma +
`measurement_error:curve_uncert` * error * curve_sigma +
`measurement_error:offset_magnitude` * error * offset_magnitude +
`measurement_error:offset_magnitude:curve_uncert` *
error * offset_magnitude * curve_sigma
)
}
estimate_precision(offset = 0, error = 8, curve_sigma = 20, hpd = "95")
estimate_precision <- function(offset, error, curve_sigma, hpd) {
osc_interact_params_wider %>%
filter(is_pos == (offset >= 0), str_detect(model, hpd)) %>%
mutate(
exp_term = `(Intercept)` + offset_magnitude * offset +
measurement_error * error +
curve_uncert * curve_sigma +
`offset_magnitude:curve_uncert` * offset * curve_sigma +
`measurement_error:curve_uncert` * error * curve_sigma +
`measurement_error:offset_magnitude` * error * offset_magnitude +
`measurement_error:offset_magnitude:curve_uncert` *
error * offset_magnitude * curve_sigma,
prob = 1 / (1 + exp(-exp_term))
)
}
estimate_precision(offset = 0, error = 8, curve_sigma = 20, hpd = "95")
estimate_precision <- function(offset, error, curve_sigma, hpd) {
osc_interact_params_wider %>%
filter(is_pos == (offset >= 0), str_detect(model, hpd)) %>%
mutate(
exp_term = `(Intercept)` + offset_magnitude * offset +
measurement_error * error +
curve_uncert * curve_sigma +
`offset_magnitude:curve_uncert` * offset * curve_sigma +
`measurement_error:curve_uncert` * error * curve_sigma +
`measurement_error:offset_magnitude` * error * offset_magnitude +
`measurement_error:offset_magnitude:curve_uncert` *
error * offset_magnitude * curve_sigma,
prob = 1 / (1 + exp(-exp_term))
) %>%
pull(prob)
}
estimate_precision(offset = 0, error = 8, curve_sigma = 20, hpd = "95")
estimated_precision <- data.frame(offset = seq(0, 50, by = 0.1), error = 16,
curve_sigma = 10) %>%
mutate(
estimate = estimate_precision(offset, error, curve_sigma, hpd = "95")
)
estimated_precision <- data.frame(offset = seq(0, 50, by = 0.1), error = 16,
curve_sigma = 10)
estimated_precision <- data.frame(offset = seq(0, 50, by = 0.1))%>%
mutate(
estimate = estimate_precision(offset, 16, 10, hpd = "95")
)
estimate_precision(offset = 0.1, error = 8, curve_sigma = 20, hpd = "95")
estimated_precision <- data.frame(offset = seq(0.1, 50, by = 0.1))%>%
mutate(
estimate = estimate_precision(offset, 16, 10, hpd = "95")
)
estimate_precision <- function(offset, error, curve_sigma, hpd) {
osc_interact_params_wider %>%
filter(is_pos = (offset >= 0), str_detect(model, hpd)) %>%
mutate(
exp_term = `(Intercept)` + offset_magnitude * offset +
measurement_error * error +
curve_uncert * curve_sigma +
`offset_magnitude:curve_uncert` * offset * curve_sigma +
`measurement_error:curve_uncert` * error * curve_sigma +
`measurement_error:offset_magnitude` * error * offset_magnitude +
`measurement_error:offset_magnitude:curve_uncert` *
error * offset_magnitude * curve_sigma,
prob = 1 / (1 + exp(-exp_term))
) %>%
pull(prob)
}
estimated_precision <- data.frame(offset = seq(0.1, 50, by = 0.1))%>%
mutate(
estimate = estimate_precision(offset, 16, 10, hpd = "95")
)
estimate_precision <- function(offset, error, curve_sigma, hpd, pos_off) {
osc_interact_params_wider %>%
filter(is_pos = pos_off, str_detect(model, hpd)) %>%
mutate(
exp_term = `(Intercept)` + offset_magnitude * offset +
measurement_error * error +
curve_uncert * curve_sigma +
`offset_magnitude:curve_uncert` * offset * curve_sigma +
`measurement_error:curve_uncert` * error * curve_sigma +
`measurement_error:offset_magnitude` * error * offset_magnitude +
`measurement_error:offset_magnitude:curve_uncert` *
error * offset_magnitude * curve_sigma,
prob = 1 / (1 + exp(-exp_term))
) %>%
pull(prob)
}
estimated_precision <- data.frame(offset = seq(0.1, 50, by = 0.1))%>%
mutate(
estimate = estimate_precision(offset, 16, 10, hpd = "95", pos_off = TRUE)
)
estimate_precision <- function(offset, error, curve_sigma, hpd, pos_off) {
osc_interact_params_wider %>%
filter(is_pos == pos_off, str_detect(model, hpd)) %>%
mutate(
exp_term = `(Intercept)` + offset_magnitude * offset +
measurement_error * error +
curve_uncert * curve_sigma +
`offset_magnitude:curve_uncert` * offset * curve_sigma +
`measurement_error:curve_uncert` * error * curve_sigma +
`measurement_error:offset_magnitude` * error * offset_magnitude +
`measurement_error:offset_magnitude:curve_uncert` *
error * offset_magnitude * curve_sigma,
prob = 1 / (1 + exp(-exp_term))
) %>%
pull(prob)
}
estimated_precision <- data.frame(offset = seq(0.1, 50, by = 0.1))%>%
mutate(
estimate = estimate_precision(offset, 16, 10, hpd = "95", pos_off = TRUE)
)
estimate_precision(offset = 20, error = 8, curve_sigma = 20, hpd = "95")
estimate_precision <- function(offset, error, curve_sigma, hpd) {
osc_interact_params_wider %>%
filter(is_pos == (offset >= 0), str_detect(model, hpd)) %>%
mutate(
exp_term = `(Intercept)` + offset_magnitude * offset +
measurement_error * error +
curve_uncert * curve_sigma +
`offset_magnitude:curve_uncert` * offset * curve_sigma +
`measurement_error:curve_uncert` * error * curve_sigma +
`measurement_error:offset_magnitude` * error * offset_magnitude +
`measurement_error:offset_magnitude:curve_uncert` *
error * offset_magnitude * curve_sigma,
prob = 1 / (1 + exp(-exp_term))
) %>%
pull(prob)
}
estimate_precision(offset = 20, error = 8, curve_sigma = 20, hpd = "95")
estimate_precision(offset = 20, error = 8, curve_sigma = 10, hpd = "95")
estimate_precision(offset = 20, error = 8, curve_sigma = 1, hpd = "95")
estimate_precision(offset = 20, error = 20, curve_sigma = 1, hpd = "95")
estimate_precision(offset = 20, error = 20, curve_sigma = 10, hpd = "95")
estimate_precision(offset = 20, error = 20, curve_sigma = 40, hpd = "95")
estimate_precision(offset = 20, error = 40, curve_sigma = 20, hpd = "95")
curve(estimated_precision(x, 20, 20, "68"))
curve(estimate_precision(x, 20, 20, "68"))
estimate_precision(x, 20, 20, "68")
curve(sin(x))
curve(estimate_precision(x, error = 40, curve_sigma = 20, hpd = "95"))
estimate_precision(offset = -30, error = 40, curve_sigma = 20, hpd = "95")
estimate_precision(offset = -10, error = 40, curve_sigma = 20, hpd = "95")
estimate_precision(offset = -10, error = 16, curve_sigma = 20, hpd = "95")
estimate_precision(offset = -10, error = 36, curve_sigma = 20, hpd = "95")
estimate_precision(offset = -30, error = 36, curve_sigma = 20, hpd = "95")
estimate_precision(offset = -30, error = 16, curve_sigma = 20, hpd = "95")
single_cals_curve_uncert_regr <- readRDS("single_cals_curve_uncert_regr.rds")
library(tidyverse)
library(broom)
single_cals_curve_uncert_regr$model
### Now load up the model data again, nest it and build the model functions
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
##Nesting
single_cals_curve_uncert_nest <- single_cals_curve_uncert_mod %>%
mutate(is_pos = if_else(offset_magnitude >= 0, TRUE, FALSE)) %>%
select(curve_uncert, measurement_error, offset_magnitude, accuracy_68,
accuracy_95, is_pos) %>%
group_by(is_pos) %>%
nest()
### Now lets run the models...
single_cals_curve_uncert_regr <- single_cals_curve_uncert_nest %>%
mutate(
offset_curve_acc68 = map(data, offset_curve_acc68),
offset_curve_acc95 = map(data, offset_curve_acc95),
offset_curve_interact_acc68 = map(data, offset_curve_interact_acc68),
offset_curve_interact_acc95 = map(data, offset_curve_interact_acc95),
offset_sigma_curve_acc68 = map(data, offset_sigma_curve_acc68),
offset_sigma_curve_acc95 = map(data, offset_sigma_curve_acc95),
offset_sigma_curve_interact_oc_acc68 =
map(data, offset_sigma_curve_interact_oc_acc68),
offset_sigma_curve_interact_oc_acc95 =
map(data, offset_sigma_curve_interact_oc_acc95),
offset_sigma_curve_interact_oc_sc_acc68 =
map(data, offset_sigma_curve_interact_oc_sc_acc68),
offset_sigma_curve_interact_oc_sc_acc95 =
map(data, offset_sigma_curve_interact_oc_sc_acc95),
offset_sigma_curve_interact_oc_sc_ocs_acc68 =
map(data, offset_sigma_curve_interact_oc_sc_ocs_acc68),
offset_sigma_curve_interact_oc_sc_ocs_acc95 =
map(data, offset_sigma_curve_interact_oc_sc_ocs_acc95),
offset_sigma_curve_interact_os_acc68 =
map(data, offset_sigma_curve_interact_os_acc68),
offset_sigma_curve_interact_os_acc95 =
map(data, offset_sigma_curve_interact_os_acc95)
)
##Nesting
single_cals_curve_uncert_nest <- single_cals_curve_uncert_mod %>%
mutate(is_pos = if_else(offset_magnitude >= 0, TRUE, FALSE)) %>%
select(curve_uncert, measurement_error, offset_magnitude, accuracy_68,
accuracy_95, is_pos) %>%
group_by(is_pos) %>%
nest()
### Now load up the model data again, nest it and build the model functions
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
##Nesting
single_cals_curve_uncert_nest <- single_cals_curve_uncert_mod %>%
mutate(is_pos = if_else(offset_magnitude >= 0, TRUE, FALSE)) %>%
select(curve_uncert, measurement_error, offset_magnitude, accuracy_68,
accuracy_95, is_pos) %>%
group_by(is_pos) %>%
nest()
## Write model functions for 68% HPDs
offset_curve_acc68 <- function(singles_data) {
glm(accuracy_68 ~ offset_magnitude + curve_uncert, data = singles_data,
family = binomial)
}
sigma_curve_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + curve_uncert, data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_curve_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude + curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_curve_interact_acc68 <- function(singles_data) {
glm(accuracy_68 ~ offset_magnitude + curve_uncert +
offset_magnitude * curve_uncert,
data = singles_data,
family = binomial)
}
sigma_curve_interact_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + curve_uncert +
measurement_error * curve_uncert,
data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_sc_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude + curve_uncert +
measurement_error * curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_oc_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_oc_sc_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * curve_uncert + measurement_error * curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_oc_sc_ocs_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * curve_uncert + measurement_error * curve_uncert +
offset_magnitude * measurement_error * curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_os_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * measurement_error,
data = singles_data, family = binomial(link = 'logit'))
}
## And now have those set up for the 95% HPD ranges -- yes I could have pivoted longer. I know!
offset_curve_acc95 <- function(singles_data) {
glm(accuracy_95 ~ offset_magnitude + curve_uncert, data = singles_data,
family = binomial)
}
sigma_curve_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + curve_uncert, data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_curve_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude + curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_curve_interact_acc95 <- function(singles_data) {
glm(accuracy_95 ~ offset_magnitude + curve_uncert +
offset_magnitude * curve_uncert,
data = singles_data,
family = binomial)
}
sigma_curve_interact_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + curve_uncert +
measurement_error * curve_uncert,
data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_sc_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude + curve_uncert +
measurement_error * curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_oc_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_oc_sc_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * curve_uncert + measurement_error * curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_oc_sc_ocs_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * curve_uncert + measurement_error * curve_uncert +
offset_magnitude * measurement_error * curve_uncert,
data = singles_data, family = binomial(link = 'logit'))
}
offset_sigma_curve_interact_os_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude + curve_uncert +
offset_magnitude * measurement_error,
data = singles_data, family = binomial(link = 'logit'))
}
### Now lets run the models...
single_cals_curve_uncert_regr <- single_cals_curve_uncert_nest %>%
mutate(
offset_curve_acc68 = map(data, offset_curve_acc68),
offset_curve_acc95 = map(data, offset_curve_acc95),
offset_curve_interact_acc68 = map(data, offset_curve_interact_acc68),
offset_curve_interact_acc95 = map(data, offset_curve_interact_acc95),
offset_sigma_curve_acc68 = map(data, offset_sigma_curve_acc68),
offset_sigma_curve_acc95 = map(data, offset_sigma_curve_acc95),
offset_sigma_curve_interact_oc_acc68 =
map(data, offset_sigma_curve_interact_oc_acc68),
offset_sigma_curve_interact_oc_acc95 =
map(data, offset_sigma_curve_interact_oc_acc95),
offset_sigma_curve_interact_oc_sc_acc68 =
map(data, offset_sigma_curve_interact_oc_sc_acc68),
offset_sigma_curve_interact_oc_sc_acc95 =
map(data, offset_sigma_curve_interact_oc_sc_acc95),
offset_sigma_curve_interact_oc_sc_ocs_acc68 =
map(data, offset_sigma_curve_interact_oc_sc_ocs_acc68),
offset_sigma_curve_interact_oc_sc_ocs_acc95 =
map(data, offset_sigma_curve_interact_oc_sc_ocs_acc95),
offset_sigma_curve_interact_os_acc68 =
map(data, offset_sigma_curve_interact_os_acc68),
offset_sigma_curve_interact_os_acc95 =
map(data, offset_sigma_curve_interact_os_acc95)
)
### Lets re-orgnize the table to make parameter extraction easier.
single_cals_curve_uncert_regr <- single_cals_curve_uncert_regr %>%
select(-data) %>%
pivot_longer(!is_pos, names_to = "model", values_to = "model_results")
saveRDS(single_cals_curve_uncert_regr, "single_cals_curve_uncert_regr.rds")
single_cals_curve_uncert_regr <- readRDS("single_cals_curve_uncert_regr.rds")
### Extract the diagnostics
single_cals_curve_uncert_diag <- single_cals_curve_uncert_regr %>%
mutate(model_diags = map(model_results, glance)) %>%
select(-model_results) %>%
unnest(cols = c(model_diags))
### Now the visualization
single_cals_curve_uncert_diag %>%
mutate(
offset_direction = if_else(is_pos, "Positive", "Negative"),
hpd_area = if_else(str_detect(model, "68"), "68.2% HPD Area", "95.4% HPD Area"),
model = str_remove_all(model, "_acc\\d{2}")
) %>%
ggplot(aes(x = model, y = AIC)) +
geom_bar(stat = "identity", fill = "steelblue", color = "grey40") +
facet_grid(rows = vars(hpd_area), cols = vars(offset_direction), scales = "free") +
labs(
x = "Model",
subtitle = "AIC of different models that include curve uncertainty"
) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", size = 0.5),
#legend.position = "none",
strip.background = element_rect(
color="white", fill="white"
),
text = element_text(family = "Corbel"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
)
single_cals_curve_uncert_regr <- readRDS("single_cals_curve_uncert_regr.rds")
single_cals_curve_uncert_regr$model
offset_curve_sigma_os_params <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect("offset_sigma_curve_interact_os_acc"))
offset_curve_sigma_os_params <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc"))
offset_curve_sigma_os_params <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc")) %>%
mutate(model_results = map(model_results, tidy)) %>%
unnest(cols = c(model_results))
offset_curve_sigma_os_params %>%
filter(str_detect(model, "68")) %>%
ggplot(aes(x = is_pos, y = estimate)) +
geom_hline(yintercept = 0, color = "grey80") +
geom_point(stat = "identity") +
geom_linerange(aes(ymin = estimate - 2*std.error, ymax = estimate + 2*std.error)) +
facet_wrap(~term, scales = "free") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", size = 0.5),
#legend.position = "none",
strip.background = element_rect(
color="white", fill="white"
),
text = element_text(family = "Corbel"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
) +
labs(
subtitle = "68.2% HPD"
)
offset_curve_sigma_os_params %>%
filter(str_detect(model, "95")) %>%
ggplot(aes(x = is_pos, y = estimate)) +
geom_hline(yintercept = 0, color = "grey80") +
geom_point(stat = "identity") +
geom_linerange(aes(ymin = estimate - 2*std.error, ymax = estimate + 2*std.error)) +
facet_wrap(~term, scales = "free") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", size = 0.5),
#legend.position = "none",
strip.background = element_rect(
color="white", fill="white"
),
text = element_text(family = "Corbel"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
) +
labs(
subtitle = "95.4% HPD"
)
offset_curve_sigma_os_params %>%
mutate(
is_pos = if_else(is_pos, "pos_offset", "neg_offset"),
hpd_area = if_else(str_detect(model, "68"), "68.2% HPD", "95.4% HPD")
) %>%
ggplot(aes(x = is_pos, y = estimate)) +
geom_hline(yintercept = 0, color = "grey80") +
geom_point(stat = "identity") +
geom_linerange(aes(ymin = estimate - 2*std.error, ymax = estimate + 2*std.error)) +
facet_grid(cols = vars(term), rows = vars(hpd_area), scales = "free") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", size = 0.5),
#legend.position = "none",
strip.background = element_rect(
color="white", fill="white"
),
text = element_text(family = "Corbel"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
) +
labs(
subtitle = "68.2% HPD"
)
offset_curve_sigma_os_params %>%
mutate(
is_pos = if_else(is_pos, "pos_offset", "neg_offset"),
hpd_area = if_else(str_detect(model, "68"), "68.2% HPD", "95.4% HPD")
) %>%
ggplot(aes(x = is_pos, y = estimate)) +
geom_hline(yintercept = 0, color = "grey80") +
geom_point(stat = "identity") +
geom_linerange(aes(ymin = estimate - 2*std.error, ymax = estimate + 2*std.error)) +
facet_grid(rows = vars(term), cols = vars(hpd_area), scales = "free") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", size = 0.5),
#legend.position = "none",
strip.background = element_rect(
color="white", fill="white"
),
text = element_text(family = "Corbel"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
) +
labs(
subtitle = "68.2% HPD"
)
