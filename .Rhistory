value_range * uncert_effect +
other_param * offset_effect
}
pred_results <- 1 / (1 + exp(-exp_term))
pred_results <- data.frame(value_range, pred_results)
pred_results
}
draw_predict_random(posterior_68_pos, "offset", seq(0, 50, 1), 25)
draw_predict_random(posterior_68_pos, "", seq(0, 50, 1), 25)
draw_predict_median <- function (model, param_plotted,
value_range, other_param){
###This function draws a single prediction from the STAN results
###It takes on the link to the STAN model, the value of the other parameter and a rangle of values for which to generate predictions.
###It returns a two column DF with input values and
intercept <- model[1:1000, 1:4, 1] |>
median()
offset_effect <- model[1:1000, 1:4, 2] |>
median()
uncert_effect <- model[1:1000, 1:4, 3] |>
median()
if (str_detect(param_plotted, "offset")) {
exp_term <- intercept +
value_range * offset_effect +
other_param * uncert_effect
} else {
exp_term <- intercept +
value_range * uncert_effect +
other_param * offset_effect
}
pred_results <- 1 / (1 + exp(-exp_term))
pred_results <-  data.frame(value_range, pred_results)
pred_results
}
draw_predict_median(posterior_68_pos, "offset", seq(0, 50, 1), 25)
draw_predict_median(posterior_68_pos, "", seq(0, 50, 1), 25)
### Now plot over simulations
plot_stan_over_sims <- function (model, range_to_plot, variable, rounding,
xlab = ""){
single_cals_w_curve_uncert <- read_csv("single_cals_w_curve_uncert.csv") |>
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
p <- plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2,
xlab = "Offset magnitude")
}
single_cals_w_curve_uncert <- read_csv("single_cals_w_curve_uncert.csv") |>
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
p <- plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2,
xlab = "Offset magnitude")
library(modules)
## Clear/prime module
singles_sensitivity_m <- module()
saveRDS(singles_sensitivity_m, "singles_sensitivity_module.R")
## Clear/prime module
ssm <- module()
saveRDS(ssm, "singles_sensitivity_module.R")
ssm <- extend(ssm, {
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_w_curve_uncert.csv") %>%
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable, hpd_to_plot = hpd_area) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_to_plot) %>%
group_by(variable_to_plot) %>%
summarize(
ratio_accurate = mean(hpd_to_plot)
) %>%
ggplot(aes(x = variable_to_plot, y = ratio_accurate)) +
geom_bar(stat = 'identity', fill = "steelblue") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", linewidth = 0.5),
text = element_text(family = "Corbel")#,
#axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
) +
labs(
y = "Ratio accurate",
x = xlab
)
}
})
ssm <- extend(ssm, {
library(ggplot2)
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_w_curve_uncert.csv") %>%
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable, hpd_to_plot = hpd_area) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_to_plot) %>%
group_by(variable_to_plot) %>%
summarize(
ratio_accurate = mean(hpd_to_plot)
) %>%
ggplot(aes(x = variable_to_plot, y = ratio_accurate)) +
geom_bar(stat = 'identity', fill = "steelblue") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", linewidth = 0.5),
text = element_text(family = "Corbel")#,
#axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
) +
labs(
y = "Ratio accurate",
x = xlab
)
}
})
ssm <- extend(ssm, {
library(ggplot2)
library(readr)
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_w_curve_uncert.csv") %>%
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable, hpd_to_plot = hpd_area) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_to_plot) %>%
group_by(variable_to_plot) %>%
summarize(
ratio_accurate = mean(hpd_to_plot)
) %>%
ggplot(aes(x = variable_to_plot, y = ratio_accurate)) +
geom_bar(stat = 'identity', fill = "steelblue") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", linewidth = 0.5),
text = element_text(family = "Corbel")#,
#axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
) +
labs(
y = "Ratio accurate",
x = xlab
)
}
})
ssm <- extend(ssm, {
# library(ggplot2)
# library(readr)
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_w_curve_uncert.csv") %>%
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable, hpd_to_plot = hpd_area) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_to_plot) %>%
group_by(variable_to_plot) %>%
summarize(
ratio_accurate = mean(hpd_to_plot)
) %>%
ggplot(aes(x = variable_to_plot, y = ratio_accurate)) +
geom_bar(stat = 'identity', fill = "steelblue") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", linewidth = 0.5),
text = element_text(family = "Corbel")#,
#axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
) +
labs(
y = "Ratio accurate",
x = xlab
)
}
})
ssm <- extend(ssm, {
library(ggplot2)
library(readr)
library(dplyr)
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_w_curve_uncert.csv") %>%
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable, hpd_to_plot = hpd_area) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_to_plot) %>%
group_by(variable_to_plot) %>%
summarize(
ratio_accurate = mean(hpd_to_plot)
) %>%
ggplot(aes(x = variable_to_plot, y = ratio_accurate)) +
geom_bar(stat = 'identity', fill = "steelblue") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", linewidth = 0.5),
text = element_text(family = "Corbel")#,
#axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
) +
labs(
y = "Ratio accurate",
x = xlab
)
}
})
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_w_curve_uncert.csv") %>%
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable, hpd_to_plot = hpd_area) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_to_plot) %>%
group_by(variable_to_plot) %>%
summarize(
ratio_accurate = mean(hpd_to_plot)
) %>%
ggplot(aes(x = variable_to_plot, y = ratio_accurate)) +
geom_bar(stat = 'identity', fill = "steelblue") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", linewidth = 0.5),
text = element_text(family = "Corbel")#,
#axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
) +
labs(
y = "Ratio accurate",
x = xlab
)
}
### Now plot over simulations
plot_stan_over_sims <- function (model, range_to_plot, variable, rounding,
xlab = ""){
single_cals_w_curve_uncert <- read_csv("single_cals_w_curve_uncert.csv") |>
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
p <- plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2,
xlab = "Offset magnitude")
}
single_cals_w_curve_uncert <- read_csv("single_cals_w_curve_uncert.csv") |>
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
p <- plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2,
xlab = "Offset magnitude")
for (i in 1:50) {
sigma_curve_uncert <- sample(single_cals_w_curve_uncert$sigma_curve_uncert, 1)
sample_predict <- draw_predict_random(posterior_68_pos, "offset",
seq(0, 50, 1), sigma_curve_uncert) |>
rename(variable_to_plot = 1, ratio_accurate = 2)
p <- p + geom_line(data = sample_predict, linewidth = 0.1, linetype = 1)
}
median_predicts <- draw_predict_median(posterior_68_pos, "offset",
seq(0, 50, 1), 25) |>
rename(variable_to_plot = 1, ratio_accurate = 2)
p + geom_line(data = median_predicts)
### Now plot over simulations
plot_stan_over_sims <- function (model, range_to_plot, variable, rounding,
xlab = ""){
single_cals_w_curve_uncert <- read_csv("single_cals_w_curve_uncert.csv") |>
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
p <- plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2,
xlab = "Offset magnitude")
}
single_cals_w_curve_uncert <- read_csv("single_cals_w_curve_uncert.csv") |>
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
p <- plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2,
xlab = "Offset magnitude")
for (i in 1:200) {
sigma_curve_uncert <- sample(single_cals_w_curve_uncert$sigma_curve_uncert, 1)
sample_predict <- draw_predict_random(posterior_68_pos, "offset",
seq(0, 50, 1), sigma_curve_uncert) |>
rename(variable_to_plot = 1, ratio_accurate = 2)
p <- p + geom_line(data = sample_predict, linewidth = 0.1, linetype = 1)
}
median_predicts <- draw_predict_median(posterior_68_pos, "offset",
seq(0, 50, 1), 25) |>
rename(variable_to_plot = 1, ratio_accurate = 2)
p + geom_line(data = median_predicts)
### Now plot over simulations
plot_stan_over_sims <- function (model, range_to_plot, variable, rounding,
xlab = ""){
single_cals_w_curve_uncert <- read_csv("single_cals_w_curve_uncert.csv") |>
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
p <- plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2,
xlab = "Offset magnitude")
}
single_cals_w_curve_uncert <- read_csv("single_cals_w_curve_uncert.csv") |>
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
p <- plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2,
xlab = "Offset magnitude")
for (i in 1:500) {
sigma_curve_uncert <- sample(single_cals_w_curve_uncert$sigma_curve_uncert, 1)
sample_predict <- draw_predict_random(posterior_68_pos, "offset",
seq(0, 50, 1), sigma_curve_uncert) |>
rename(variable_to_plot = 1, ratio_accurate = 2)
p <- p + geom_line(data = sample_predict, linewidth = 0.1, linetype = 1)
}
median_predicts <- draw_predict_median(posterior_68_pos, "offset",
seq(0, 50, 1), 25) |>
rename(variable_to_plot = 1, ratio_accurate = 2)
p + geom_line(data = median_predicts)
### Now plot over simulations
plot_stan_over_sims <- function (model, range_to_plot, variable, rounding,
xlab = ""){
single_cals_w_curve_uncert <- read_csv("single_cals_w_curve_uncert.csv") |>
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
p <- plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2,
xlab = "Offset magnitude")
}
single_cals_w_curve_uncert <- read_csv("single_cals_w_curve_uncert.csv") |>
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
p <- plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2,
xlab = "Offset magnitude")
for (i in 1:50) {
sigma_curve_uncert <- sample(single_cals_w_curve_uncert$sigma_curve_uncert, 1)
sample_predict <- draw_predict_random(posterior_68_pos, "offset",
seq(0, 50, 1), sigma_curve_uncert) |>
rename(variable_to_plot = 1, ratio_accurate = 2)
p <- p + geom_line(data = sample_predict, linewidth = 0.1, linetype = 1)
}
median_predicts <- draw_predict_median(posterior_68_pos, "offset",
seq(0, 50, 1), 25) |>
rename(variable_to_plot = 1, ratio_accurate = 2)
p + geom_line(data = median_predicts)
library(tidyverse)
library(broom)
library(jtools)
library(rstan)
library(rstanarm)
library(bayesplot)
library(modules)
ssm <- read_rds("singles_sensitivity_module.R")
##List of all data to be loaded to run downstream project elements.
list_of_sims <- read_csv("sims_list.csv")
single_cals <- read_csv("simulation_results/singles_011_results.csv")
single_cals_log_diagnostics <- read_csv("model_results/single_cals_log_diagnostics.csv")
cal_curve <- read_csv("intcal_20_interpolated.csv")
single_cals_log_results <- read_csv("model_results/single_cals_log_results.csv")
single_cals_log_results_bin10 <- read_csv(
"model_results/single_cals_log_results_bin10.csv")
single_cals_w_curve_uncert <- read_csv("single_cals_w_curve_uncert.csv")
single_cals_curve_uncert_regr <- readRDS("single_cals_curve_uncert_regr.rds")
stan_offset_curve_sigma_comb <- read_rds("stan_offset_curve_sigma_comb.rds")
library(pssp)
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
model_name = "act_oc_sc_acc",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset magnitude")
library(tidyverse)
library(broom)
library(jtools)
library(rstan)
library(rstanarm)
library(bayesplot)
library(modules)
library(pssp)
plot_model_predictions_ocs(offset_dir = "neg", hpd_area = "accuracy_68",
variable = "offset_magnitude",
range = c(-50, 0), rounding = 2.5,
xlab = "Offset magnitude")
## Function tests
predict_model_results_osc(offset_dir = "pos", hpd_area = "68",
model_name = "offset_curve_interact",
variable = "offset_magnitude",
variable_range = seq(0, 50))
##List of all data to be loaded to run downstream project elements.
list_of_sims <- read_csv("sims_list.csv")
single_cals <- read_csv("simulation_results/singles_011_results.csv")
single_cals_log_diagnostics <- read_csv("model_results/single_cals_log_diagnostics.csv")
cal_curve <- read_csv("intcal_20_interpolated.csv")
single_cals_log_results <- read_csv("model_results/single_cals_log_results.csv")
single_cals_log_results_bin10 <- read_csv(
"model_results/single_cals_log_results_bin10.csv")
single_cals_w_curve_uncert <- read_csv("single_cals_w_curve_uncert.csv")
single_cals_curve_uncert_regr <- readRDS("single_cals_curve_uncert_regr.rds")
stan_offset_curve_sigma_comb <- read_rds("stan_offset_curve_sigma_comb.rds")
## Function tests
predict_model_results_osc(offset_dir = "pos", hpd_area = "68",
model_name = "offset_curve_interact",
variable = "offset_magnitude",
variable_range = seq(0, 50))
predict_model_results_osc <- function(offset_dir, hpd_area, model_name,
variable, variable_range) {
##Function to simplify prediction generation
##Takes on offset_dir and hpd_area, which simplify the results table,
##Takes on variable name as string and variable range as a sequence
##Assumes offset dir, hpd_area, and variable name provided are all correct
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, model_name)) %>%
mutate(is_pos = if_else(is_pos, "positive", "negative")) %>% ## Change type for filtering
filter(str_detect(is_pos, offset_dir) & str_detect(model, hpd_area))
predicted_results <- make_predictions(offset_curve_sigma_os$model_results[[1]],
pred = variable,
pred.values = variable_range)
predicted_results
}
## Function tests
predict_model_results_osc(offset_dir = "pos", hpd_area = "68",
model_name = "offset_curve_interact",
variable = "offset_magnitude",
variable_range = seq(0, 50))
pssp::plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5,
xlab = "Calibration curve uncertainty")
library(tidyverse)
pssp::plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5,
xlab = "Calibration curve uncertainty")
pssp::plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5,
xlab = "Calibration curve uncertainty")
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_w_curve_uncert.csv") %>%
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable, hpd_to_plot = hpd_area) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_to_plot) %>%
group_by(variable_to_plot) %>%
summarize(
ratio_accurate = mean(hpd_to_plot)
) %>%
ggplot(aes(x = variable_to_plot, y = ratio_accurate)) +
geom_bar(stat = 'identity', fill = "steelblue") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", linewidth = 0.5),
text = element_text(family = "Corbel")#,
#axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
) +
labs(
y = "Ratio accurate",
x = xlab
)
}
plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5,
xlab = "Calibration curve uncertainty")
plot_simulation_results_osc(range_to_plot = c(24, 50), hpd_area = "accuracy_95",
variable = "measurement_error", rounding = 2.5,
xlab = "Measurement uncertainty")
single_cals_curve_uncert_mod <- read_csv("single_cals_w_curve_uncert.csv") %>%
mutate(sigma_curve_uncert = sqrt((measurement_error^2) + (curve_uncert^2)))
pssp::plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5,
xlab = "Calibration curve uncertainty")
library(tidyverse)
pssp::plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5,
xlab = "Calibration curve uncertainty")
pssp::plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5,
xlab = "Calibration curve uncertainty",
singles_results_csv = "single_cals_w_curve_uncert.csv")
