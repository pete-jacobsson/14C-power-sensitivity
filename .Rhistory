mutate(results = map(as.name(model), tidy))
print(model)
}
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we find the index for the model
index <- grep(model, colnames(single_cals_modelled))
# temp_results <- single_cals_modelled %>%
#  mutate(results = map(index, tidy))
print(index)
}
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we find the index for the model
index <- grep(model, colnames(single_cals_modelled))
temp_results <- single_cals_modelled %>%
mutate(results = map(index, tidy))
print(index)
}
dplyr::last_dplyr_warnings()
rm(temp_results)
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we find the index for the model
index <- grep(model, colnames(single_cals_modelled))
## Next we broom the models out. We needed the index because the string "model" does not play well with map.
temp_results <- single_cals_modelled %>%
mutate(
results = map(index, tidy),
model = model
)
temp_diagnostics <- single_cals_modelled %>%
mutate(
diagnostics = map(index, glance),
model = model
)
}
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we find the index for the model
index <- grep(model, colnames(single_cals_modelled))
## Next we broom the models out. We needed the index because the string "model" does not play well with map.
temp_results <- single_cals_modelled %>%
mutate(
results = map(index, tidy),
model = model
)
temp_diagnostics <- single_cals_modelled %>%
mutate(
diagnostics = map(single_cals_modelled[index], glance),
model = model
)
}
glance(single_cals_modelled$offset_only_acc68)
glance(single_cals_modelled$offset_only_acc68[1])
View(temp_results)
single_cals_modelled$offset_only_acc68[1]
fit <- lm(Volume ~ Girth + Height, trees)
fit
glance(fit)
model <- glm(Species ~ Sepal.Length + Sepal.Width, data = iris, family = "binomial")
model
glance(model)
### Build functions to use with map
## Could have tried in-line but it would be very confusing with the number of parameters floating about.
offset_only_acc68 <- function(singles_data) {
glm(accuracy_68 ~ offset_magnitude, data = singles_data,
family = binomial)
}
sigma_only_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error, data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude, data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_interact_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude +
measurement_error * offset_magnitude,
data = singles_data, family = binomial(link = 'logit'))
}
offset_only_acc95 <- function(singles_data) {
glm(accuracy_95 ~ offset_magnitude, data = singles_data,
family = binomial(link = 'logit'))
}
sigma_only_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error, data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude, data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_interact_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude +
measurement_error * offset_magnitude,
data = singles_data, family = binomial(link = 'logit'))
}
### Load the data
single_cals <- read_csv("simulation_results/singles_011_results.csv")
###Seperate pos from neg offsets and group things by cal curve
single_cals_modelled <- single_cals %>%
mutate (
offset_pos = if_else(offset_magnitude > 0, TRUE, FALSE),
binned_targets = ntile(target_year, 50)
) %>%
group_by(offset_pos, binned_targets) %>%
nest()
### Now lets specify a model to test if things work
offset_only_acc68 <- function(singles_data) {
glm(accuracy_68 ~ offset_magnitude, data = singles_data, family = binomial(link = 'logit'))
}
### After which we apply the model across the DF and check if everythign works as it should.
# single_cals_modelled <- single_cals_modelled %>%
#   mutate(offset_only_acc68 = map(data, offset_only_acc68))
#
# summary(single_cals_modelled$offset_only_acc68[[1]])
##Comment out after testing to avoid clashes
## Great! Now build remaining models and apply to the DF.
### Now use map to apply the models across the data
single_cals_modelled <- single_cals_modelled %>%
mutate(
offset_only_acc68 = map(data, offset_only_acc68),
sigma_only_acc68 = map(data, sigma_only_acc68),
offset_sigma_acc68 = map(data, offset_sigma_acc68),
offset_sigma_interact_acc68 = map(data, offset_sigma_interact_acc68),
offset_only_acc95 = map(data, offset_only_acc95),
sigma_only_acc95 = map(data, sigma_only_acc95),
offset_sigma_acc95 = map(data, offset_sigma_acc95),
offset_sigma_interact_acc95 = map(data, offset_sigma_interact_acc95)
)
glance(single_cals_modelled$offset_only_acc68[1])
single_cals_modelled$offset_only_acc68[1]
model
### Build functions to use with map
## Could have tried in-line but it would be very confusing with the number of parameters floating about.
offset_only_acc68 <- function(singles_data) {
glm(accuracy_68 ~ offset_magnitude, data = singles_data,
family = binomial)
}
sigma_only_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error, data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude, data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_interact_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude +
measurement_error * offset_magnitude,
data = singles_data, family = binomial(link = 'logit'))
}
offset_only_acc95 <- function(singles_data) {
glm(accuracy_95 ~ offset_magnitude, data = singles_data,
family = binomial(link = 'logit'))
}
sigma_only_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error, data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude, data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_interact_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude +
measurement_error * offset_magnitude,
data = singles_data, family = binomial(link = 'logit'))
}
### Load the data
single_cals <- read_csv("simulation_results/singles_011_results.csv")
###Seperate pos from neg offsets and group things by cal curve
single_cals_modelled <- single_cals %>%
mutate (
offset_pos = if_else(offset_magnitude > 0, TRUE, FALSE),
binned_targets = ntile(target_year, 50)
) %>%
group_by(offset_pos, binned_targets) %>%
nest()
### Now lets specify a model to test if things work
offset_only_acc68 <- function(singles_data) {
glm(accuracy_68 ~ offset_magnitude, data = singles_data, family = binomial(link = 'logit'))
}
### After which we apply the model across the DF and check if everythign works as it should.
# single_cals_modelled <- single_cals_modelled %>%
#   mutate(offset_only_acc68 = map(data, offset_only_acc68))
#
# summary(single_cals_modelled$offset_only_acc68[[1]])
##Comment out after testing to avoid clashes
## Great! Now build remaining models and apply to the DF.
### Build functions to use with map
## Could have tried in-line but it would be very confusing with the number of parameters floating about.
offset_only_acc68 <- function(singles_data) {
glm(accuracy_68 ~ offset_magnitude, data = singles_data,
family = binomial)
}
sigma_only_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error, data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude, data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_interact_acc68 <- function(singles_data) {
glm(accuracy_68 ~ measurement_error + offset_magnitude +
measurement_error * offset_magnitude,
data = singles_data, family = binomial(link = 'logit'))
}
offset_only_acc95 <- function(singles_data) {
glm(accuracy_95 ~ offset_magnitude, data = singles_data,
family = binomial(link = 'logit'))
}
sigma_only_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error, data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude, data = singles_data,
family = binomial(link = 'logit'))
}
offset_sigma_interact_acc95 <- function(singles_data) {
glm(accuracy_95 ~ measurement_error + offset_magnitude +
measurement_error * offset_magnitude,
data = singles_data, family = binomial(link = 'logit'))
}
### Now use map to apply the models across the data
single_cals_modelled <- single_cals_modelled %>%
mutate(
offset_only_acc68 = map(data, offset_only_acc68),
sigma_only_acc68 = map(data, sigma_only_acc68),
offset_sigma_acc68 = map(data, offset_sigma_acc68),
offset_sigma_interact_acc68 = map(data, offset_sigma_interact_acc68),
offset_only_acc95 = map(data, offset_only_acc95),
sigma_only_acc95 = map(data, sigma_only_acc95),
offset_sigma_acc95 = map(data, offset_sigma_acc95),
offset_sigma_interact_acc95 = map(data, offset_sigma_interact_acc95)
)
single_cals_modelled$offset_only_acc68[1]
glance(single_cals_modelled$offset_only_acc68[1])
model
gremlin <- single_cals_modelled$offset_only_acc68[1]
gremlin <- single_cals_modelled$offset_only_acc68[[1]]
glance(single_cals_modelled$offset_only_acc68[[1]])
glance(single_cals_modelled$[offset_only_acc68[4][[1]])
glance(single_cals_modelled[4][[1]])
gremlin <- single_cals_modelled[4][[1]]
gremlin <- single_cals_modelled[4, 1]
gremlin <- single_cals_modelled[1, 4]
gremlin <- single_cals_modelled[[1], 4]
gremlin <- single_cals_modelled["offset_only_acc68"]
gremlin <- single_cals_modelled["offset_only_acc68"][1]
gremlin <- gremlin[[1]]
gremlin <- single_cals_modelled["offset_only_acc68"]
gremlin <- gremlin[[[1]]]
gremlin <- single_cals_modelled["offset_only_acc68"]
gremlin <- gremlin[[1]]
gremlin <- gremlin[1]
gremlin <- single_cals_modelled["offset_only_acc68"]
gremlin <- gremlin[[1]]
gremlin <- gremlin[[1]]
glance(gremlin)
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we find the index for the model
index <- grep(model, colnames(single_cals_modelled))
## Next we broom the models out. We needed the index because the string "model" does not play well with map.
temp_results <- single_cals_modelled %>%
mutate(
results = map(index, tidy),
model = model
) %>%
unnest(results)
}
View(temp_results)
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we find the index for the model
index <- grep(model, colnames(single_cals_modelled))
## Next we broom the models out. We needed the index because the string "model" does not play well with map.
temp_results <- single_cals_modelled %>%
mutate(
results = map(index, tidy),
model = model
) %>%
select(offset_pos, binned_targets, results) %>%
unnest(results)
}
View(temp_results)
model_names <- colnames(single_cals_modelled)[4:11]
single_cals_log_results <- data.frame()
single_cals_log_diagnostics <- data.frame()
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we find the index for the model
index <- grep(model, colnames(single_cals_modelled))
## Next we broom the models out. We needed the index because the string "model" does not play well with map.
temp_results <- single_cals_modelled %>%
mutate(
results = map(index, tidy),
model = model
) #%>%
# select(offset_pos, binned_targets, results) %>%
# unnest(results)
}
glance(single_cals_modelled[4][[1]])
View(temp_results)
View(temp_results[[12]][[1]])
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we find the index for the model
index <- grep(model, colnames(single_cals_modelled))
## Next we broom the models out. We needed the index because the string "model" does not play well with map.
temp_results <- single_cals_modelled %>%
mutate(
results = map(single_cals_modelled[index], tidy),
model = model
) #%>%
# select(offset_pos, binned_targets, results) %>%
# unnest(results)
}
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we thin down the DF to the model of interest
temp_results <- single_cals_modelled %>%
select(1, 2, model)
}
View(temp_results)
## This will get a little experimental - we are trying to create a big old table!
## First, we thin down the DF to the model of interest
temp_results <- single_cals_modelled %>%
select(1, 2, model) %>%
rename(3 = glm_list)
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we thin down the DF to the model of interest
temp_results <- single_cals_modelled %>%
select(1, 2, model) %>%
rename(3, glm_list)
}
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we thin down the DF to the model of interest
temp_results <- single_cals_modelled %>%
select(1, 2, model) %>%
rename(glm_list = 3)
}
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we thin down the DF to the model of interest
temp_results <- single_cals_modelled %>%
select(1, 2, model) %>%
rename(glm_list = 3) %>%
mutate(
logistic_results = map(glm_list, tidy)
)
}
View(temp_results)
View(temp_results[[4]][[1]])
model_names <- colnames(single_cals_modelled)[4:11]
single_cals_log_results <- data.frame()
single_cals_log_diagnostics <- data.frame()
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we thin down the DF to the model of interest
temp_results <- single_cals_modelled %>%
select(1, 2, model) %>%
rename(glm_list = 3) %>%
mutate(
logistic_results = map(glm_list, tidy),
model = model
)
}
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we thin down the DF to the model of interest
temp_results <- single_cals_modelled %>%
select(1, 2, model) %>%
#rename(glm_list = 3) %>%
mutate(
logistic_results = map(vars(model), tidy),
model = model
)
}
model_names <- colnames(single_cals_modelled)[4:11]
single_cals_log_results <- data.frame()
single_cals_log_diagnostics <- data.frame()
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we thin down the DF to the model of interest
temp_results <- single_cals_modelled %>%
select(1, 2, model) %>%
rename(glm_list = 3) %>%
mutate(
logistic_results = map(glm_list, tidy),
model = model
)
}
model_names <- colnames(single_cals_modelled)[4:11]
single_cals_log_results <- data.frame()
single_cals_log_diagnostics <- data.frame()
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we thin down the DF to the model of interest
temp_results <- single_cals_modelled %>%
select(1, 2, model) %>%
rename(glm_list = 3) %>%
mutate(
logistic_results = map(glm_list, tidy),
model = model
) %>%
unnest(logistic_results)
}
model_names <- colnames(single_cals_modelled)[4:11]
single_cals_log_results <- data.frame()
single_cals_log_diagnostics <- data.frame()
for (model in model_names[1]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we thin down the DF to the model of interest
temp_results <- single_cals_modelled %>%
select(1, 2, model) %>%
rename(glm_list = 3) %>%
mutate(
logistic_results = map(glm_list, tidy),
model = model
) %>%
select(-glm_list) %>%
unnest(logistic_results)
}
View(temp_results)
for (model in model_names[6]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we thin down the DF to the model of interest
temp_results <- single_cals_modelled %>%
select(1, 2, model) %>%
rename(glm_list = 3) %>%
mutate(
logistic_results = map(glm_list, tidy),
model = model
) %>%
select(-glm_list) %>%
unnest(logistic_results)
}
View(temp_results)
for (model in model_names[4]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we thin down the DF to the model of interest
temp_results <- single_cals_modelled %>%
select(1, 2, model) %>%
rename(glm_list = 3) %>%
mutate(
logistic_results = map(glm_list, tidy),
model = model
) %>%
select(-glm_list) %>%
unnest(logistic_results)
}
View(temp_results)
for (model in model_names[4]) {
## This will get a little experimental - we are trying to create a big old table!
## First, we thin down the DF to the model of interest
temp_results <- single_cals_modelled %>%
select(1, 2, model) %>%
rename(glm_list = 3) %>%
mutate(
logistic_results = map(glm_list, tidy),
model = model
) %>%
select(-glm_list) %>%
unnest(logistic_results)
temp_diagnostics <- single_cals_modelled %>%
select(1, 2, model) %>%
rename(glm_list = 3) %>%
mutate(
logistic_diagnostics = map(glm_list, glance),
model = model
) %>%
select(-glm_list) %>%
unnest(logistic_diagnostics)
}
View(temp_diagnostics)
model_names <- colnames(single_cals_modelled)[4:11]
single_cals_log_results <- data.frame()
single_cals_log_diagnostics <- data.frame()
for (model in model_names) {
## This will get a little experimental - we are trying to create a big old table!
## First, we thin down the DF to the model of interest
temp_results <- single_cals_modelled %>%
select(1, 2, model) %>%
rename(glm_list = 3) %>%
mutate(
logistic_results = map(glm_list, tidy),
model = model
) %>%
select(-glm_list) %>%
unnest(logistic_results)
temp_diagnostics <- single_cals_modelled %>%
select(1, 2, model) %>%
rename(glm_list = 3) %>%
mutate(
logistic_diagnostics = map(glm_list, glance),
model = model
) %>%
select(-glm_list) %>%
unnest(logistic_diagnostics)
single_cals_log_results <- rbind(single_cals_log_results, temp_results)
single_cals_log_diagnostics <- rbind(single_cals_log_diagnostics, temp_diagnostics)
}
write_csv(single_cals_log_results, "model_results/single_cals_log_results.csv")
write_csv(single_cals_log_diagnostics, "model_results/single_cals_log_diagnostics.csv")
