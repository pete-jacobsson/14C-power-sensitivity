mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_to_plot) %>%
group_by(variable_to_plot) %>%
summarize(
ratio_accurate = mean(hpd_to_plot)
) %>%
ggplot(aes(x = variable_to_plot, y = ratio_accurate)) +
geom_bar(stat = 'identity', color = "steelblue") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", linewidth = 0.5),
text = element_text(family = "Corbel")#,
#axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
)
}
plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5)
plot_simulation_results_osc(range_to_plot = c(24, 50), hpd_area = "accuracy_95",
variable = "measurement_error", rounding = 2.5)
plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2)
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable, hpd_to_plot = hpd_area) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_to_plot) %>%
group_by(variable_to_plot) %>%
summarize(
ratio_accurate = mean(hpd_to_plot)
) %>%
ggplot(aes(x = variable_to_plot, y = ratio_accurate)) +
geom_bar(stat = 'identity', fill = "steelblue") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", linewidth = 0.5),
text = element_text(family = "Corbel")#,
#axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
)
}
plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5)
plot_simulation_results_osc(range_to_plot = c(24, 50), hpd_area = "accuracy_95",
variable = "measurement_error", rounding = 2.5)
plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2)
plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5,
xlab = "Calibration curve uncertainty")
plot_simulation_results_osc(range_to_plot = c(24, 50), hpd_area = "accuracy_95",
variable = "measurement_error", rounding = 2.5,
xlab = "Measurement uncertainty")
plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2,
xlab = "Offset Magnitude")
plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5,
xlab = "Calibration curve uncertainty")
plot_simulation_results_osc(range_to_plot = c(24, 50), hpd_area = "accuracy_95",
variable = "measurement_error", rounding = 2.5,
xlab = "Measurement uncertainty")
plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2,
xlab = "Offset Magnitude")
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable, hpd_to_plot = hpd_area) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_to_plot) %>%
group_by(variable_to_plot) %>%
summarize(
ratio_accurate = mean(hpd_to_plot)
) %>%
ggplot(aes(x = variable_to_plot, y = ratio_accurate)) +
geom_bar(stat = 'identity', fill = "steelblue") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", linewidth = 0.5),
text = element_text(family = "Corbel")#,
#axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
) +
labs(
y = "Ratio accurate",
x = xlab
)
}
plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5,
xlab = "Calibration curve uncertainty")
plot_simulation_results_osc(range_to_plot = c(24, 50), hpd_area = "accuracy_95",
variable = "measurement_error", rounding = 2.5,
xlab = "Measurement uncertainty")
plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2,
xlab = "Offset Magnitude")
plot_simulation_results_osc(range_to_plot = c(10, 15), hpd_area = "accuracy_68",
variable = "curve_uncert", rounding = 5,
xlab = "Calibration curve uncertainty")
plot_simulation_results_osc(range_to_plot = c(24, 50), hpd_area = "accuracy_95",
variable = "measurement_error", rounding = 2.5,
xlab = "Measurement uncertainty")
plot_simulation_results_osc(range_to_plot = c(0, 50), hpd_area = "accuracy_68",
variable = "offset_magnitude", rounding = 2,
xlab = "Offset magnitude")
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc"))
predict_model_results_osc <- function(offset_dir, hpd_area, variable,
variable_range) {
##Function to simplify prediction generation
##Takes on offset_dir and hpd_area, which simplify the results table,
##Takes on variable name as string and variable range as a sequence
##Assumes offset dir, hpd_area, and variable name provided are all correct
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc")) %>%
mutate(is_pos = if_else(is_pos, "positive", "negative")) %>% ## Change type for filtering
filter(str_detect(is_pos, offset_dir) & str_detect(model, hpd_area))
predicted_results <- make_predictions(offset_curve_sigma_os$model_results[[1]],
pred = variable,
pred.values = variable_range)
predicted_results
}
plot_model_predictions_ocs <- function(offset_dir, hpd_area, variable,
range, rounding, xlab) {
## This function wraps predict_model_results and plot_simulation_results and plots prediction over simulation.
## parameters and assumptions as per underpinning functions.
plot <- plot_simulation_results_osc(range_to_plot = range, hpd_area = hpd_area,
variable = variable, rounding = rounding,
xlab = xlab)
plot
}
plot_model_predictions_ocs <- function(offset_dir = "pos", hpd_area = "68",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset Magnitude")
plot_model_predictions_ocs <- function(offset_dir = "neg", hpd_area = "68",
variable = "measurement_error",
range = c(8, 32), rounding = 2,
xlab = "Offset Magnitude")
plot_model_predictions_ocs <- function(offset_dir = "pos", hpd_area = "68",
variable = "offset_magnitude",
range = c(10, 30), rounding = 2.5,
xlab = "Offset Magnitude")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "68",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset Magnitude")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset Magnitude")
plot_model_predictions_ocs(offset_dir = "neg", hpd_area = "accuracy_68",
variable = "measurement_error",
range = c(8, 32), rounding = 2,
xlab = "Offset Magnitude")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_95",
variable = "offset_magnitude",
range = c(10, 30), rounding = 2.5,
xlab = "Offset Magnitude")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset magnitude")
plot_model_predictions_ocs(offset_dir = "neg", hpd_area = "accuracy_68",
variable = "measurement_error",
range = c(8, 32), rounding = 2,
xlab = "Measurement error")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_95",
variable = "curve_uncertainty",
range = c(10, 30), rounding = 2.5,
xlab = "Curve uncertainty")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset magnitude")
plot_model_predictions_ocs(offset_dir = "neg", hpd_area = "accuracy_68",
variable = "measurement_error",
range = c(8, 32), rounding = 2,
xlab = "Measurement error")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_95",
variable = "curve_uncert",
range = c(10, 30), rounding = 2.5,
xlab = "Curve uncertainty")
plot_model_predictions_ocs <- function(offset_dir, hpd_area, variable,
range, rounding, xlab) {
## This function wraps predict_model_results and plot_simulation_results and plots prediction over simulation.
## parameters and assumptions as per underpinning functions.
plot <- plot_simulation_results_osc(range_to_plot = range, hpd_area = hpd_area,
variable = variable, rounding = rounding,
xlab = xlab)
predicts_tab <- predict_model_results_osc(offset_dir = offset_dir,
hpd_area = hpd_area,
variable = variable,
variable_range = seq(range[1],
range[2]))
predicts_tab
}
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset magnitude")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset magnitude")
## Function tests
predict_model_results_osc(offset_dir = "pos", hpd_area = "accuracy_68",
variable = "offset_magnitude",
variable_range = seq(0, 50))
plot_model_predictions_ocs <- function(offset_dir, hpd_area, variable,
range, rounding, xlab) {
## This function wraps predict_model_results and plot_simulation_results and plots prediction over simulation.
## parameters and assumptions as per underpinning functions.
plot <- plot_simulation_results_osc(range_to_plot = range, hpd_area = hpd_area,
variable = variable, rounding = rounding,
xlab = xlab)
hpd_area = str_extract(hpd_area, "\\d{2}")
return(hpd_area)
predicts_tab <- predict_model_results_osc(offset_dir = offset_dir,
hpd_area = hpd_area,
variable = variable,
variable_range = seq(range[1],
range[2]))
predicts_tab
}
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset magnitude")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_95",
variable = "curve_uncert",
range = c(10, 30), rounding = 2.5,
xlab = "Curve uncertainty")
plot_model_predictions_ocs <- function(offset_dir, hpd_area, variable,
range, rounding, xlab) {
## This function wraps predict_model_results and plot_simulation_results and plots prediction over simulation.
## parameters and assumptions as per underpinning functions.
plot <- plot_simulation_results_osc(range_to_plot = range, hpd_area = hpd_area,
variable = variable, rounding = rounding,
xlab = xlab)
hpd_for_predict = str_extract(hpd_area, "\\d{2}") ## predict_model_results only takes two-digit numbers as input here (for filtering) - this extracts from HPD area above
predicts_tab <- predict_model_results_osc(offset_dir = offset_dir,
hpd_area = hpd_for_predict,
variable = variable,
variable_range = seq(range[1],
range[2]))
predicts_tab
}
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset magnitude")
plot_model_predictions_ocs(offset_dir = "neg", hpd_area = "accuracy_68",
variable = "measurement_error",
range = c(8, 32), rounding = 2,
xlab = "Measurement error")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_95",
variable = "curve_uncert",
range = c(10, 30), rounding = 2.5,
xlab = "Curve uncertainty")
plot_model_predictions_ocs <- function(offset_dir, hpd_area, variable,
range, rounding, xlab) {
## This function wraps predict_model_results and plot_simulation_results and plots prediction over simulation.
## parameters and assumptions as per underpinning functions.
plot <- plot_simulation_results_osc(range_to_plot = range, hpd_area = hpd_area,
variable = variable, rounding = rounding,
xlab = xlab)
hpd_for_predict = str_extract(hpd_area, "\\d{2}") ## predict_model_results only takes two-digit numbers as input here (for filtering) - this extracts from HPD area above
predicts_tab <- predict_model_results_osc(offset_dir = offset_dir,
hpd_area = hpd_for_predict,
variable = variable,
variable_range = seq(range[1],
range[2]))
plot <- plot +
geom_line(data = predicts_tab)
plot
}
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset magnitude")
## Function tests
predict_model_results_osc(offset_dir = "pos", hpd_area = "68",
variable = "offset_magnitude",
variable_range = seq(0, 50))
predict_model_results_osc(offset_dir = "neg", hpd_area = "95",
variable = "curve_uncert",
variable_range = seq(10, 35))
predict_model_results_osc(offset_dir = "pos", hpd_area = "95",
variable = "measurement_error",
variable_range = seq(8, 32))
plot_model_predictions_ocs <- function(offset_dir, hpd_area, variable,
range, rounding, xlab) {
## This function wraps predict_model_results and plot_simulation_results and plots prediction over simulation.
## parameters and assumptions as per underpinning functions.
plot <- plot_simulation_results_osc(range_to_plot = range, hpd_area = hpd_area,
variable = variable, rounding = rounding,
xlab = xlab)
hpd_for_predict = str_extract(hpd_area, "\\d{2}") ## predict_model_results only takes two-digit numbers as input here (for filtering) - this extracts from HPD area above
predicts_tab <- predict_model_results_osc(offset_dir = offset_dir,
hpd_area = hpd_for_predict,
variable = variable,
variable_range = seq(range[1],
range[2])) %>%
rename(variable_to_plot = variable)
plot <- plot +
geom_line(data = predicts_tab)
plot
}
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset magnitude")
plot_model_predictions_ocs <- function(offset_dir, hpd_area, variable,
range, rounding, xlab) {
## This function wraps predict_model_results and plot_simulation_results and plots prediction over simulation.
## parameters and assumptions as per underpinning functions.
plot <- plot_simulation_results_osc(range_to_plot = range, hpd_area = hpd_area,
variable = variable, rounding = rounding,
xlab = xlab)
hpd_for_predict = str_extract(hpd_area, "\\d{2}") ## predict_model_results only takes two-digit numbers as input here (for filtering) - this extracts from HPD area above
predicts_tab <- predict_model_results_osc(offset_dir = offset_dir,
hpd_area = hpd_for_predict,
variable = variable,
variable_range = seq(range[1],
range[2]))
predicts_tab <- predicts_tab %>%
rename("variable_to_plot" = variable)
plot <- plot +
geom_line(data = predicts_tab)
plot
}
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset magnitude")
plot_model_predictions_ocs <- function(offset_dir, hpd_area, variable,
range, rounding, xlab) {
## This function wraps predict_model_results and plot_simulation_results and plots prediction over simulation.
## parameters and assumptions as per underpinning functions.
plot <- plot_simulation_results_osc(range_to_plot = range, hpd_area = hpd_area,
variable = variable, rounding = rounding,
xlab = xlab)
hpd_for_predict = str_extract(hpd_area, "\\d{2}") ## predict_model_results only takes two-digit numbers as input here (for filtering) - this extracts from HPD area above
predicts_tab <- predict_model_results_osc(offset_dir = offset_dir,
hpd_area = hpd_for_predict,
variable = variable,
variable_range = seq(range[1],
range[2]))
predicts_tab <- predicts_tab %>%
rename("variable_to_plot" = variable, ratio_accurate = 1) ##Dovetail the variable names for the plot at the iteration where interactions start getting explored
plot <- plot +
geom_line(data = predicts_tab)
plot
}
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset magnitude")
plot_model_predictions_ocs(offset_dir = "neg", hpd_area = "accuracy_68",
variable = "measurement_error",
range = c(8, 32), rounding = 2,
xlab = "Measurement error")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_95",
variable = "curve_uncert",
range = c(10, 30), rounding = 2.5,
xlab = "Curve uncertainty")
library(tidyverse)
library(broom)
library(jtools)
predict_model_results_osc <- function(offset_dir, hpd_area, variable,
variable_range) {
##Function to simplify prediction generation
##Takes on offset_dir and hpd_area, which simplify the results table,
##Takes on variable name as string and variable range as a sequence
##Assumes offset dir, hpd_area, and variable name provided are all correct
offset_curve_sigma_os <- readRDS("single_cals_curve_uncert_regr.rds") %>%
filter(str_detect(model, "offset_sigma_curve_interact_os_acc")) %>%
mutate(is_pos = if_else(is_pos, "positive", "negative")) %>% ## Change type for filtering
filter(str_detect(is_pos, offset_dir) & str_detect(model, hpd_area))
predicted_results <- make_predictions(offset_curve_sigma_os$model_results[[1]],
pred = variable,
pred.values = variable_range)
predicted_results
}
plot_simulation_results_osc <- function(range_to_plot, hpd_area, variable,
rounding, xlab) {
##This function plots the simulation results for the purposes of the results graphing
single_cals_curve_uncert_mod <- read_csv("single_cals_curve_uncert_mod.csv")
single_cals_curve_uncert_mod %>%
rename(variable_to_plot = variable, hpd_to_plot = hpd_area) %>%
filter(variable_to_plot >= range_to_plot[1] &
variable_to_plot <= range_to_plot) %>%
mutate(
variable_to_plot = plyr::round_any(variable_to_plot, rounding)
) %>%
select(variable_to_plot, hpd_to_plot) %>%
group_by(variable_to_plot) %>%
summarize(
ratio_accurate = mean(hpd_to_plot)
) %>%
ggplot(aes(x = variable_to_plot, y = ratio_accurate)) +
geom_bar(stat = 'identity', fill = "steelblue") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "grey50", linewidth = 0.5),
text = element_text(family = "Corbel")#,
#axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 9)
) +
labs(
y = "Ratio accurate",
x = xlab
)
}
plot_model_predictions_ocs <- function(offset_dir, hpd_area, variable,
range, rounding, xlab) {
## This function wraps predict_model_results and plot_simulation_results and plots prediction over simulation.
## parameters and assumptions as per underpinning functions.
plot <- plot_simulation_results_osc(range_to_plot = range, hpd_area = hpd_area,
variable = variable, rounding = rounding,
xlab = xlab)
hpd_for_predict = str_extract(hpd_area, "\\d{2}") ## predict_model_results only takes two-digit numbers as input here (for filtering) - this extracts from HPD area above
predicts_tab <- predict_model_results_osc(offset_dir = offset_dir,
hpd_area = hpd_for_predict,
variable = variable,
variable_range = seq(range[1],
range[2]))
predicts_tab <- predicts_tab %>%
rename("variable_to_plot" = variable, ratio_accurate = 1) ##Dovetail the variable names for the plot at the iteration where interactions start getting explored
plot <- plot +
geom_line(data = predicts_tab)
plot
}
## Pos 68%
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset magnitude")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
variable = "measurement_error",
range = c(8, 32), rounding = 2,
xlab = "Measurement error")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_68",
variable = "curve_uncert",
range = c(10, 30), rounding = 2.5,
xlab = "Curve uncertainty")
## Pos 95%
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_95",
variable = "offset_magnitude",
range = c(0, 50), rounding = 2.5,
xlab = "Offset magnitude")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_95",
variable = "measurement_error",
range = c(8, 32), rounding = 2,
xlab = "Measurement error")
plot_model_predictions_ocs(offset_dir = "pos", hpd_area = "accuracy_95",
variable = "curve_uncert",
range = c(10, 30), rounding = 2.5,
xlab = "Curve uncertainty")
## Neg 68%
plot_model_predictions_ocs(offset_dir = "neg", hpd_area = "accuracy_68",
variable = "offset_magnitude",
range = c(-50, 0), rounding = 2.5,
xlab = "Offset magnitude")
plot_model_predictions_ocs(offset_dir = "neg", hpd_area = "accuracy_68",
variable = "measurement_error",
range = c(8, 32), rounding = 2,
xlab = "Measurement error")
plot_model_predictions_ocs(offset_dir = "neg", hpd_area = "accuracy_68",
variable = "curve_uncert",
range = c(10, 30), rounding = 2.5,
xlab = "Curve uncertainty")
## Neg 95%
plot_model_predictions_ocs(offset_dir = "neg", hpd_area = "accuracy_95",
variable = "offset_magnitude",
range = c(-50, 0), rounding = 2.5,
xlab = "Offset magnitude")
plot_model_predictions_ocs(offset_dir = "neg", hpd_area = "accuracy_95",
variable = "measurement_error",
range = c(8, 32), rounding = 2,
xlab = "Measurement error")
plot_model_predictions_ocs(offset_dir = "neg", hpd_area = "accuracy_95",
variable = "curve_uncert",
range = c(10, 30), rounding = 2.5,
xlab = "Curve uncertainty")
install.packages("rstan")
